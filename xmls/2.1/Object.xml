<class name="Object" category="Core"><brief_description>
		Base class for all non built-in types.</brief_description><description>
		Base class for all non built-in types. Everything not a built-in type starts the inheritance chain from this class.
		Objects do not manage memory, if inheriting from one the object will most likely have to be deleted manually (call the [method free] function from the script or delete from C++).
		Some derivates add memory management, such as [Reference] (which keeps a reference count and deletes itself automatically when no longer referenced) and [Node], which deletes the children tree when deleted.
		Objects export properties, which are mainly useful for storage and editing, but not really so much in programming. Properties are exported in [method _get_property_list] and handled in [method _get] and [method _set]. However, scripting languages and C++ have simpler means to export them.
		Objects also receive notifications ([method _notification]). Notifications are a simple way to notify the object about simple events, so they can all be handled together.</description><methods><method name="XL_MESSAGE" qualifiers="const"><return type="String"></return><argument index="0" name="message" type="String"></argument><description>
				Deprecated, will go away.</description></method><method name="_get" qualifiers="virtual"><argument index="0" name="property" type="String"></argument><description>
				Return a property, return null if the property does not exist.</description></method><method name="_get_property_list" qualifiers="virtual"><return type="Array"></return><description>
				Return the property list, array of dictionaries, dictionaries must contain: name:String, type:int (see TYPE_* enum in globals) and optionally: hint:int (see PROPERTY_HINT_* in globals), hint_string:String, usage:int (see PROPERTY_USAGE_* in globals).</description></method><method name="_init" qualifiers="virtual"><description></description></method><method name="_notification" qualifiers="virtual"><argument index="0" name="what" type="int"></argument><description>
				Notification request, the notification id is received.</description></method><method name="_set" qualifiers="virtual"><argument index="0" name="property" type="String"></argument><argument index="1" name="value" type="Variant"></argument><description>
				Set a property. Return true if the property was found.</description></method><method name="add_user_signal"><argument index="0" name="signal" type="String"></argument><argument index="1" name="arguments" type="Array" default="Array()"></argument><description>
				Add a user signal (can be added anytime). Arguments are optional, but can be added as an array of dictionaries, each containing "name" and "type" (from [@Global Scope] TYPE_*).</description></method><method name="call"><argument index="0" name="method" type="String"></argument><argument index="1" name="arg0" type="Variant" default="NULL"></argument><argument index="2" name="arg1" type="Variant" default="NULL"></argument><argument index="3" name="arg2" type="Variant" default="NULL"></argument><argument index="4" name="arg3" type="Variant" default="NULL"></argument><argument index="5" name="arg4" type="Variant" default="NULL"></argument><argument index="6" name="arg5" type="Variant" default="NULL"></argument><argument index="7" name="arg6" type="Variant" default="NULL"></argument><argument index="8" name="arg7" type="Variant" default="NULL"></argument><argument index="9" name="arg8" type="Variant" default="NULL"></argument><argument index="10" name="arg9" type="Variant" default="NULL"></argument><description>
				Call a function in the object, result is returned.</description></method><method name="call_deferred"><argument index="0" name="method" type="String"></argument><argument index="1" name="arg0" type="Variant" default="NULL"></argument><argument index="2" name="arg1" type="Variant" default="NULL"></argument><argument index="3" name="arg2" type="Variant" default="NULL"></argument><argument index="4" name="arg3" type="Variant" default="NULL"></argument><argument index="5" name="arg4" type="Variant" default="NULL"></argument><description>
				Create and store a function in the object. The call will take place on idle time.</description></method><method name="callv"><return type="Variant"></return><argument index="0" name="method" type="String"></argument><argument index="1" name="arg_array" type="Array"></argument><description></description></method><method name="can_translate_messages" qualifiers="const"><return type="bool"></return><description>
				Return true if this object can translate strings.</description></method><method name="connect"><return type="int"></return><argument index="0" name="signal" type="String"></argument><argument index="1" name="target" type="Object"></argument><argument index="2" name="method" type="String"></argument><argument index="3" name="binds" type="Array" default="Array()"></argument><argument index="4" name="flags" type="int" default="0"></argument><description>
				Connect a signal to a method at a target (member function). Binds are optional and are passed as extra arguments to the call. Flags specify optional deferred or one shot connections, see enum CONNECT_*. A signal can only be connected once to a method, and it will throw an error if already connected. If you want to avoid this, use [method is_connected] to check.</description></method><method name="disconnect"><argument index="0" name="signal" type="String"></argument><argument index="1" name="target" type="Object"></argument><argument index="2" name="method" type="String"></argument><description>
				Disconnect a signal from a method.</description></method><method name="emit_signal"><argument index="0" name="signal" type="String"></argument><argument index="1" name="arg0" type="Variant" default="NULL"></argument><argument index="2" name="arg1" type="Variant" default="NULL"></argument><argument index="3" name="arg2" type="Variant" default="NULL"></argument><argument index="4" name="arg3" type="Variant" default="NULL"></argument><argument index="5" name="arg4" type="Variant" default="NULL"></argument><description>
				Emit a signal. Arguments are passed in an array.</description></method><method name="free"><description></description></method><method name="get" qualifiers="const"><argument index="0" name="property" type="String"></argument><description>
				Get a property from the object.</description></method><method name="get_instance_ID" qualifiers="const"><return type="int"></return><description>
				Return the instance ID. All objects have a unique instance ID.</description></method><method name="get_meta" qualifiers="const"><return type="Variant"></return><argument index="0" name="name" type="String"></argument><description>
				Return a metadata from the object.</description></method><method name="get_meta_list" qualifiers="const"><return type="StringArray"></return><description>
				Return the list of metadata in the object.</description></method><method name="get_method_list" qualifiers="const"><return type="Array"></return><description></description></method><method name="get_property_list" qualifiers="const"><return type="Array"></return><description>
				Return the list of properties as an array of dictionaries, dictionaries contain: name:String, type:int (see TYPE_* enum in globals) and optionally: hint:int (see PROPERTY_HINT_* in globals), hint_string:String, usage:int (see PROPERTY_USAGE_* in globals).</description></method><method name="get_script" qualifiers="const"><return type="Script"></return><description>
				Return the object script (or null if it doesn't have one).</description></method><method name="get_signal_connection_list" qualifiers="const"><return type="Array"></return><argument index="0" name="signal" type="String"></argument><description></description></method><method name="get_signal_list" qualifiers="const"><return type="Array"></return><description>
				Return the list of signals as an array of dictionaries.</description></method><method name="get_type" qualifiers="const"><return type="String"></return><description>
				Return the type of the object as a string.</description></method><method name="has_meta" qualifiers="const"><return type="bool"></return><argument index="0" name="name" type="String"></argument><description>
				Return true if a metadata is found with the requested name.</description></method><method name="has_method" qualifiers="const"><return type="bool"></return><argument index="0" name="method" type="String"></argument><description></description></method><method name="has_user_signal" qualifiers="const"><return type="bool"></return><argument index="0" name="signal" type="String"></argument><description></description></method><method name="is_blocking_signals" qualifiers="const"><return type="bool"></return><description>
				Return true if signal emission blocking is enabled.</description></method><method name="is_connected" qualifiers="const"><return type="bool"></return><argument index="0" name="signal" type="String"></argument><argument index="1" name="target" type="Object"></argument><argument index="2" name="method" type="String"></argument><description>
				Return true if a connection exists for a given signal and target/method.</description></method><method name="is_queued_for_deletion" qualifiers="const"><return type="bool"></return><description></description></method><method name="is_type" qualifiers="const"><return type="bool"></return><argument index="0" name="type" type="String"></argument><description>
				Check the type of the object against a string (including inheritance).</description></method><method name="notification"><argument index="0" name="what" type="int"></argument><argument index="1" name="reversed" type="bool" default="false"></argument><description>
				Notify the object of something.</description></method><method name="property_list_changed_notify"><description></description></method><method name="set"><argument index="0" name="property" type="String"></argument><argument index="1" name="value" type="Variant"></argument><description>
				Set property into the object.</description></method><method name="set_block_signals"><argument index="0" name="enable" type="bool"></argument><description>
				If set to true, signal emission is blocked.</description></method><method name="set_message_translation"><argument index="0" name="enable" type="bool"></argument><description>
				Set true if this object can translate strings (in calls to tr() ). Default is true.</description></method><method name="set_meta"><argument index="0" name="name" type="String"></argument><argument index="1" name="value" type="Variant"></argument><description>
				Set a metadata into the object. Metadata is serialized. Metadata can be [i]anything[/i].</description></method><method name="set_script"><argument index="0" name="script" type="Script"></argument><description>
				Set a script into the object, scripts extend the object functionality.</description></method><method name="tr" qualifiers="const"><return type="String"></return><argument index="0" name="message" type="String"></argument><description>
				Translate a message. Only works in message translation is enabled (which is by default). See [method set_message_translation].</description></method></methods><signals><signal name="script_changed"><description></description></signal></signals><constants><constant name="NOTIFICATION_POSTINITIALIZE" value="0">
			Called right when the object is initialized. Not available in script.</constant><constant name="NOTIFICATION_PREDELETE" value="1">
			Called before the object is about to be deleted.</constant><constant name="CONNECT_DEFERRED" value="1">
			Connect a signal in deferred mode. This way, signal emissions are stored in a queue, then set on idle time.</constant><constant name="CONNECT_PERSIST" value="2">
			Persisting connections are saved when the object is serialized to file.</constant><constant name="CONNECT_ONESHOT" value="4">
			One shot connections disconnect themselves after emission.</constant></constants></class>