<class category="Core" inherits="Reference" name="EditorImportPlugin"><brief_description>
		Import plugin for editor</brief_description><description>
		Import plugins make it easy to handle importing of external assets into a project. They way they work is not that obvious though, so please make sure to read the documentation, tutorials and examples.</description><methods><method name="can_reimport_multiple_files" qualifiers="virtual"><return type="bool"></return><description></description></method><method name="custom_export" qualifiers="virtual"><return type="RawArray"></return><argument index="0" name="path" type="String"></argument><argument index="1" name="platform" type="EditorExportPlatform"></argument><description>
				Generally, files that are imported stay the same when exported. The only exception is in some cases when the file must be re-imported for different platforms (ie. texture compression).
				If you want to customize the export process, it's recommended to use [method EditorExportPlugin.custom_export] instead.</description></method><method name="expand_source_path"><return type="String"></return><argument index="0" name="path" type="String"></argument><description></description></method><method name="get_name" qualifiers="virtual"><return type="String"></return><description>
				Get the name of the import plugin, which will be used to identify content imported by this plugin. Try to use lowercase and underscores if possible.</description></method><method name="get_visible_name" qualifiers="virtual"><return type="String"></return><description>
				Visible name for this plugin, which will be shown on the import menu.</description></method><method name="import" qualifiers="virtual"><return type="int"></return><argument index="0" name="path" type="String"></argument><argument index="1" name="from" type="ResourceImportMetadata"></argument><description>
				Perform an import of an external resources into the project. This function is both called on import (from the dialog) or re-import (manual or automatic when external source files changed).
				An import process generally works like this:
				1) Check the metadata for source files and options. Metadata is either generated in the import dialog or taken from an existing resource upon reimport.
				2) Perform the import process into a new resource. Some times the resource being re-imported may be already loaded and in use, so checking for this by using [method ResourceLoader.has] is recommended. Otherwise create a new resource.
				3) Set the metadata from the argument into the existing or new resource being created using [method Resource.set_import_metadata].
				4) Save the resource into 'path' (function argument)</description></method><method name="import_dialog" qualifiers="virtual"><argument index="0" name="from" type="String"></argument><description>
				This function is called when either the user chooses to import a resource of this type (Import menu), or when the user chooses to re-import the resource (from filesystem). In the later case, the path for the existing file is supplied in the argument.
				If the path is supplied, it is recommended to read the import metadata with [method ResourceLoader.load_import_metadata] and fill in the fields with the values contained there.
				The dialog can be shown in any way (just use a ConfirmationDialog and pop it up). Upon confirmation, fill up a ResourceImportMetadata and call the [method EditorImportPlugin.import] function with this information.</description></method><method name="import_from_drop" qualifiers="virtual"><argument index="0" name="files" type="StringArray"></argument><argument index="1" name="dest_path" type="String"></argument><description></description></method><method name="reimport_multiple_files" qualifiers="virtual"><argument index="0" name="files" type="StringArray"></argument><description></description></method><method name="validate_source_path"><return type="String"></return><argument index="0" name="path" type="String"></argument><description></description></method></methods><constants></constants></class>