<class category="Core" inherits="Node" name="EditorPlugin"><brief_description>
		Used by the editor to extend its functionality.</brief_description><description>
		Plugins are used by the editor to extend functionality. The most common types of plugins are those which edit a given node or resource type, import plugins and export plugins.</description><methods><method name="add_control_to_bottom_panel"><return type="ToolButton"></return><argument index="0" name="control" type="Control"></argument><argument index="1" name="title" type="String"></argument><description>
				Add a control to the bottom panel (together with Output, Debug, Animation, etc). Returns a reference to the button added. It's up to you to hide/show the button when needed. If your plugin is being removed, also make sure to remove your control by calling [method remove_control_from_bottom_panel].</description></method><method name="add_control_to_container"><argument index="0" name="container" type="int"></argument><argument index="1" name="control" type="Control"></argument><description>
				Add a custom control to a container (see CONTAINER_* enum). There are many locations where custom controls can be added in the editor UI.
				Please remember that you have to manage the visibility of your custom controls yourself (and likely hide it after adding it).
				If your plugin is being removed, also make sure to remove your custom controls too.</description></method><method name="add_control_to_dock"><argument index="0" name="slot" type="int"></argument><argument index="1" name="control" type="Control"></argument><description>
				Add the control to a specific dock slot (see DOCK_* enum for options).
				If the dock is repositioned and as long as the plugin is active, the editor will save the dock position on further sessions.
				If your plugin is being removed, also make sure to remove your control by calling [method remove_control_from_docks].</description></method><method name="add_custom_type"><argument index="0" name="type" type="String"></argument><argument index="1" name="base" type="String"></argument><argument index="2" name="script" type="Script"></argument><argument index="3" name="icon" type="Texture"></argument><description>
				Add a custom type, which will appear in the list of nodes or resources. An icon can be optionally passed.
				When given node or resource is selected, the base type will be instanced (ie, "Spatial", "Control", "Resource"), then the script will be loaded and set to this object.
				You can use the [method EditorPlugin.handles] to check if your custom object is being edited by checking the script or using 'extends' keyword.
				During run-time, this will be a simple object with a script so this function does not need to be called then.</description></method><method name="add_export_plugin"><argument index="0" name="plugin" type="EditorExportPlugin"></argument><description>
				Add an export plugin. Plugins of this kind can change files being exported. On exit don't forget to call [method remove_export_plugin].</description></method><method name="add_import_plugin"><argument index="0" name="plugin" type="EditorImportPlugin"></argument><description>
				Add an import plugin. These plugins manage importing external content (from outside the project) into formats the engine can understand.
				On exit, don't forget to remove the plugin by calling [method remove_import_plugin]</description></method><method name="apply_changes" qualifiers="virtual"><description>
				This method is called when the editor is about to save the project, switch to another tab, etc. It asks the plugin to apply any pending state changes to ensure consistency.
				This is used, for example, in shader editors to let the plugin know that it must apply the shader code being written by the user to the object.</description></method><method name="clear" qualifiers="virtual"><description>
				Clear all the state and reset the object being edited to zero. This ensures your plugin does not keep editing a currently existing node, or a node from the wrong scene.</description></method><method name="create_spatial_gizmo" qualifiers="virtual"><return type="EditorSpatialGizmo"></return><argument index="0" name="for_spatial" type="Spatial"></argument><description>
				This is used for plugins that create gizmos used by the spatial editor. Just check that the node passed in the "for_spatial" argument matches your plugin.</description></method><method name="edit" qualifiers="virtual"><argument index="0" name="object" type="Object"></argument><description>
				This function is used for plugins that edit specific object types (nodes or resources). It requests the editor to edit the given object.</description></method><method name="edit_resource"><argument index="0" name="arg0" type="Object"></argument><description>
				Tells the editor to handle the edit of the given resource. For example, if you pass a script as argument, the editor will open the script editor.</description></method><method name="forward_input_event" qualifiers="virtual"><return type="bool"></return><argument index="0" name="event" type="InputEvent"></argument><description>
				This is a low level function for plugins that edit a given object type derived from CanvasItem to capture the input in the 2D editor viewport. The function is only being called if your object is being edited.
				Return true if you want to capture the input, otherwise false.</description></method><method name="forward_spatial_input_event" qualifiers="virtual"><return type="bool"></return><argument index="0" name="camera" type="Camera"></argument><argument index="1" name="event" type="InputEvent"></argument><description>
				This is a low level function for plugins that edit a given objet type derived from Spatial to capture the input of the viewport. The function is only being called if your object is being edited.
				By using the [InputEvent] and the [Camera] arguments it's pretty easy to do raycasts into space using Camera functions.
				Return true if you want to capture the input, otherwise false.</description></method><method name="get_base_control"><return type="Control"></return><description>
				Get a base control where it's safe to place dialogs. Many plugins open dialogs and they need a control as a base to make sure they use the editor icons and theme.</description></method><method name="get_breakpoints" qualifiers="virtual"><return type="StringArray"></return><description>
				This is for editors that edit script based objects. You can return a list of breakpoints in the format (script:line), for example: res://path_to_script.gd:25</description></method><method name="get_editor_settings"><return type="EditorSettings"></return><description>
				Get the general settings for the editor (the same window that appears in the Settings menu).</description></method><method name="get_editor_viewport"><return type="Control"></return><description>
				Get the main editor control. Use this as a parent for main screens.</description></method><method name="get_name" qualifiers="virtual"><return type="String"></return><description>
				Get the name of the editor plugin. For main scren plugins this is what will appear in the selector (which by default is 2D, 3D, Script).</description></method><method name="get_selection"><return type="EditorSelection"></return><description>
				Get the object that handles the selection of nodes in the Scene Tree editor.</description></method><method name="get_state" qualifiers="virtual"><return type="Dictionary"></return><description>
				Get the state of your plugin editor. This is used when saving the scene (so state is kept when opening it again) and for switching tabs (so state can be restored when the tab returns).</description></method><method name="get_undo_redo"><return type="UndoRedo"></return><description>
				Get the undo/redo object. Most actions in the editor can be undoable, so use this object to make sure this happens when it's worth it.</description></method><method name="get_window_layout" qualifiers="virtual"><argument index="0" name="layout" type="ConfigFile"></argument><description>
				Get the GUI layout of the plugin. This is used to save the project's editor layout when the [method EditorPlugin.queue_save_layout] is called or the editor layout was changed(For example changing the position of a dock).</description></method><method name="handles" qualifiers="virtual"><return type="bool"></return><argument index="0" name="object" type="Object"></argument><description>
				Implement this function if your plugin edits a specific type of object (Resource or Node). If you return true, then you will get the functions [method EditorPlugin.edit] and [method EditorPlugin.make_visible] called when the editor requests them.</description></method><method name="has_main_screen" qualifiers="virtual"><return type="bool"></return><description>
				Return true if this is a main screen editor plugin (it goes in the main screen selector together with 2D, 3D, Script).</description></method><method name="make_visible" qualifiers="virtual"><argument index="0" name="visible" type="bool"></argument><description>
				This function will be called when the editor is requested to become visible. It is used for plugins that edit a specific object type.
				Remember that you have to manage the visibility of all your editor controls manually.</description></method><method name="queue_save_layout" qualifiers="const"><description>
				Queue save the project's editor layout.</description></method><method name="remove_control_from_bottom_panel"><argument index="0" name="control" type="Control"></argument><description>
				Remove the control from the bottom panel. Don't forget to call this if you added one, so the editor can remove it cleanly.</description></method><method name="remove_control_from_docks"><argument index="0" name="control" type="Control"></argument><description>
				Remove the control from the dock. Don't forget to call this if you added one, so the editor can save the layout and remove it cleanly.</description></method><method name="remove_custom_type"><argument index="0" name="type" type="String"></argument><description>
				Remove a custom type added by [method EditorPlugin.add_custom_type]</description></method><method name="remove_export_plugin"><argument index="0" name="plugin" type="EditorExportPlugin"></argument><description>
				Remove the export plugin, don't forget to call this on exit.</description></method><method name="remove_import_plugin"><argument index="0" name="plugin" type="EditorImportPlugin"></argument><description>
				Remove the import plugin, don't forget to call this on exit.</description></method><method name="save_external_data" qualifiers="virtual"><description>
				This method is called after the editor saves the project or when it's closed. It asks the plugin to save edited external scenes/resources.</description></method><method name="set_state" qualifiers="virtual"><argument index="0" name="state" type="Dictionary"></argument><description>
				Restore the state saved by [method EditorPlugin.get_state].</description></method><method name="set_window_layout" qualifiers="virtual"><argument index="0" name="layout" type="ConfigFile"></argument><description>
				Restore the plugin GUI layout saved by [method EditorPlugin.get_window_layout].</description></method></methods><constants><constant name="CONTAINER_TOOLBAR" value="0"></constant><constant name="CONTAINER_SPATIAL_EDITOR_MENU" value="1"></constant><constant name="CONTAINER_SPATIAL_EDITOR_SIDE" value="2"></constant><constant name="CONTAINER_SPATIAL_EDITOR_BOTTOM" value="3"></constant><constant name="CONTAINER_CANVAS_EDITOR_MENU" value="4"></constant><constant name="CONTAINER_CANVAS_EDITOR_SIDE" value="5"></constant><constant name="CONTAINER_PROPERTY_EDITOR_BOTTOM" value="7"></constant><constant name="DOCK_SLOT_LEFT_UL" value="0"></constant><constant name="DOCK_SLOT_LEFT_BL" value="1"></constant><constant name="DOCK_SLOT_LEFT_UR" value="2"></constant><constant name="DOCK_SLOT_LEFT_BR" value="3"></constant><constant name="DOCK_SLOT_RIGHT_UL" value="4"></constant><constant name="DOCK_SLOT_RIGHT_BL" value="5"></constant><constant name="DOCK_SLOT_RIGHT_UR" value="6"></constant><constant name="DOCK_SLOT_RIGHT_BR" value="7"></constant><constant name="DOCK_SLOT_MAX" value="8"></constant></constants></class>