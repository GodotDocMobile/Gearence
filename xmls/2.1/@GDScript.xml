<class category="Core" name="@GDScript"><brief_description>
		Built-in GDScript functions.</brief_description><description>
		This contains the list of built-in gdscript functions. Mostly math functions and other utilities. Everything else is expanded by objects.</description><methods><method name="Color8"><return type="Color"></return><argument index="0" name="r8" type="int"></argument><argument index="1" name="g8" type="int"></argument><argument index="2" name="b8" type="int"></argument><argument index="3" name="a8" type="int"></argument><description>
				Make a color from red, green, blue and alpha. Arguments can range from 0 to 255.</description></method><method name="ColorN"><return type="Color"></return><argument index="0" name="name" type="String"></argument><argument index="1" name="alpha" type="float"></argument><description></description></method><method name="abs"><return type="float"></return><argument index="0" name="s" type="float"></argument><description>
				Remove sign (works for integer and float).</description></method><method name="acos"><return type="float"></return><argument index="0" name="s" type="float"></argument><description>
				Arc-cosine.</description></method><method name="asin"><return type="float"></return><argument index="0" name="s" type="float"></argument><description>
				Arc-sine.</description></method><method name="assert"><return type="Nil"></return><argument index="0" name="condition" type="bool"></argument><description>
				Assert that the condition is true. If the condition is false, generates an error.</description></method><method name="atan"><return type="float"></return><argument index="0" name="s" type="float"></argument><description>
				Arc-tangent.</description></method><method name="atan2"><return type="float"></return><argument index="0" name="x" type="float"></argument><argument index="1" name="y" type="float"></argument><description>
				Arc-tangent that takes a 2D vector as argument, returns the full -pi to +pi range.</description></method><method name="bytes2var"><return type="Variant"></return><argument index="0" name="bytes" type="RawArray"></argument><description>
				Decode a byte array back to a value.</description></method><method name="ceil"><return type="float"></return><argument index="0" name="s" type="float"></argument><description>
				Ceiling (rounds up to nearest integer).</description></method><method name="clamp"><return type="float"></return><argument index="0" name="val" type="float"></argument><argument index="1" name="min" type="float"></argument><argument index="2" name="max" type="float"></argument><description>
				Clamp both values to a range.</description></method><method name="convert"><return type="Object"></return><argument index="0" name="what" type="Variant"></argument><argument index="1" name="type" type="int"></argument><description>
				Convert from a type to another in the best way possible. The "type" parameter uses the enum TYPE_* in [@Global Scope].</description></method><method name="cos"><return type="float"></return><argument index="0" name="s" type="float"></argument><description>
				Standard cosine function.</description></method><method name="cosh"><return type="float"></return><argument index="0" name="s" type="float"></argument><description>
				Hyperbolic cosine.</description></method><method name="db2linear"><return type="float"></return><argument index="0" name="db" type="float"></argument><description>
				Convert from decibels to linear energy (audio).</description></method><method name="decimals"><return type="float"></return><argument index="0" name="step" type="float"></argument><description>
				Return the amount of decimals in the floating point value.</description></method><method name="dectime"><return type="float"></return><argument index="0" name="value" type="float"></argument><argument index="1" name="amount" type="float"></argument><argument index="2" name="step" type="float"></argument><description>
				Decreases time by a specified amount.</description></method><method name="deg2rad"><return type="float"></return><argument index="0" name="deg" type="float"></argument><description>
				Convert from degrees to radians.</description></method><method name="dict2inst"><return type="Object"></return><argument index="0" name="dict" type="Dictionary"></argument><description>
				Convert a previously converted instances to dictionary back into an instance. Useful for deserializing.</description></method><method name="ease"><return type="float"></return><argument index="0" name="s" type="float"></argument><argument index="1" name="curve" type="float"></argument><description>
				Easing function, based on exponent. 0 is constant, 1 is linear, 0 to 1 is ease-in, 1+ is ease out. Negative values are in-out/out in.</description></method><method name="exp"><return type="float"></return><argument index="0" name="s" type="float"></argument><description>
				Exponential logarithm.</description></method><method name="floor"><return type="float"></return><argument index="0" name="s" type="float"></argument><description>
				Floor (rounds down to nearest integer).</description></method><method name="fmod"><return type="float"></return><argument index="0" name="x" type="float"></argument><argument index="1" name="y" type="float"></argument><description>
				Module (remainder of x/y).</description></method><method name="fposmod"><return type="float"></return><argument index="0" name="x" type="float"></argument><argument index="1" name="y" type="float"></argument><description>
				Module (remainder of x/y) that wraps equally in positive and negative.</description></method><method name="funcref"><return type="FuncRef"></return><argument index="0" name="instance" type="Object"></argument><argument index="1" name="funcname" type="String"></argument><description>
				Return a reference to the specified function.</description></method><method name="hash"><return type="int"></return><argument index="0" name="var:Variant" type="Variant"></argument><description>
				Hash the variable passed and return an integer.</description></method><method name="inst2dict"><return type="Dictionary"></return><argument index="0" name="inst" type="Object"></argument><description>
				Convert a script class instance to a dictionary (useful for serializing).</description></method><method name="instance_from_id"><return type="Object"></return><argument index="0" name="instance_id" type="int"></argument><description>
				Get an object by its ID.</description></method><method name="is_inf"><return type="float"></return><argument index="0" name="s" type="float"></argument><description></description></method><method name="is_nan"><return type="float"></return><argument index="0" name="s" type="float"></argument><description></description></method><method name="lerp"><return type="float"></return><argument index="0" name="from" type="float"></argument><argument index="1" name="to" type="float"></argument><argument index="2" name="weight" type="float"></argument><description>
				Linear interpolates between two values by a normalized value.</description></method><method name="linear2db"><return type="float"></return><argument index="0" name="nrg" type="float"></argument><description>
				Convert from linear energy to decibels (audio).</description></method><method name="load"><return type="Resource"></return><argument index="0" name="path" type="String"></argument><description>
				Load a resource from the filesystem, pass a valid path as argument.</description></method><method name="log"><return type="float"></return><argument index="0" name="s" type="float"></argument><description>
				Natural logarithm.</description></method><method name="max"><return type="float"></return><argument index="0" name="a" type="float"></argument><argument index="1" name="b" type="float"></argument><description>
				Return the maximum of two values.</description></method><method name="min"><return type="float"></return><argument index="0" name="a" type="float"></argument><argument index="1" name="b" type="float"></argument><description>
				Return the minimum of two values.</description></method><method name="nearest_po2"><return type="int"></return><argument index="0" name="val" type="int"></argument><description>
				Return the nearest larger power of 2 for an integer.</description></method><method name="pow"><return type="float"></return><argument index="0" name="x" type="float"></argument><argument index="1" name="y" type="float"></argument><description>
				Power function, x elevate to y.</description></method><method name="preload"><return type="Resource"></return><argument index="0" name="path" type="String"></argument><description>
				Preload a resource from the filesystem. The resource is loaded during script parsing.</description></method><method name="print"><return type="Nil"></return><argument index="0" name="what" type="Variant"></argument><argument index="1" name="..." type="Variant"></argument><description>
				Print one or more arguments to strings in the best way possible to a console line.</description></method><method name="print_stack"><return type="Nil"></return><description>
				Print a stack track at code location, only works when running with debugger turned on.</description></method><method name="printerr"><return type="Nil"></return><argument index="0" name="what" type="Variant"></argument><argument index="1" name="..." type="Variant"></argument><description>
				Print one or more arguments to strings in the best way possible to standard error line.</description></method><method name="printraw"><return type="Nil"></return><argument index="0" name="what" type="Variant"></argument><argument index="1" name="..." type="Variant"></argument><description>
				Print one or more arguments to strings in the best way possible to console. No newline is added at the end.</description></method><method name="prints"><return type="Nil"></return><argument index="0" name="what" type="Variant"></argument><argument index="1" name="..." type="Variant"></argument><description>
				Print one or more arguments to the console with a space between each argument.</description></method><method name="printt"><return type="Nil"></return><argument index="0" name="what" type="Variant"></argument><argument index="1" name="..." type="Variant"></argument><description>
				Print one or more arguments to the console with a tab between each argument.</description></method><method name="rad2deg"><return type="float"></return><argument index="0" name="rad" type="float"></argument><description>
				Convert from radians to degrees.</description></method><method name="rand_range"><return type="float"></return><argument index="0" name="from" type="float"></argument><argument index="1" name="to" type="float"></argument><description>
				Random range, any floating point value between 'from' and 'to'</description></method><method name="rand_seed"><return type="Array"></return><argument index="0" name="seed" type="int"></argument><description>
				Random from seed, pass a seed and an array with both number and new seed is returned.</description></method><method name="randf"><return type="float"></return><description>
				Random value (0 to 1 float).</description></method><method name="randi"><return type="int"></return><description>
				Random 32 bits value (integer). To obtain a value	from 0 to N, you can use remainder, like (for random from 0 to 19): randi() % 20.</description></method><method name="randomize"><return type="Nil"></return><description>
				Reset the seed of the random number generator with a new, different one.</description></method><method name="range"><return type="Array"></return><argument index="0" name="..." type="Variant"></argument><description>
				Return an array with the given range. Range can be 1 argument N (0 to N-1), two arguments (initial, final-1) or three arguments (initial, final-1, increment).</description></method><method name="round"><return type="float"></return><argument index="0" name="s" type="float"></argument><description>
				Round to nearest integer.</description></method><method name="seed"><return type="Nil"></return><argument index="0" name="seed" type="int"></argument><description>
				Set seed for the random number generator.</description></method><method name="sign"><return type="float"></return><argument index="0" name="s" type="float"></argument><description>
				Return sign (-1 or +1).</description></method><method name="sin"><return type="float"></return><argument index="0" name="s" type="float"></argument><description>
				Standard sine function.</description></method><method name="sinh"><return type="float"></return><argument index="0" name="s" type="float"></argument><description>
				Hyperbolic sine.</description></method><method name="sqrt"><return type="float"></return><argument index="0" name="s" type="float"></argument><description>
				Square root.</description></method><method name="stepify"><return type="float"></return><argument index="0" name="s" type="float"></argument><argument index="1" name="step" type="float"></argument><description>
				Snap float value to a given step.</description></method><method name="str"><return type="String"></return><argument index="0" name="what" type="Variant"></argument><argument index="1" name="..." type="Variant"></argument><description>
				Convert one or more arguments to strings in the best way possible.</description></method><method name="str2var"><return type="Variant"></return><argument index="0" name="string" type="String"></argument><description>
				Convert a formatted string that was returned by [method var2str] to the original value.</description></method><method name="tan"><return type="float"></return><argument index="0" name="s" type="float"></argument><description>
				Standard tangent function.</description></method><method name="tanh"><return type="float"></return><argument index="0" name="s" type="float"></argument><description>
				Hyperbolic tangent.</description></method><method name="type_exists"><return type="bool"></return><argument index="0" name="type" type="String"></argument><description></description></method><method name="typeof"><return type="int"></return><argument index="0" name="what" type="Variant"></argument><description>
				Return the internal type of the given Variant object, using the TYPE_* enum in [@Global Scope].</description></method><method name="var2bytes"><return type="RawArray"></return><argument index="0" name="var" type="Variant"></argument><description>
				Encode a variable value to a byte array.</description></method><method name="var2str"><return type="String"></return><argument index="0" name="var" type="Variant"></argument><description>
				Convert a value to a formatted string that can later be parsed using [method str2var].</description></method><method name="weakref"><return type="WeakRef"></return><argument index="0" name="obj" type="Object"></argument><description>
				Return a weak reference to an object.</description></method><method name="yield"><return type="GDFunctionState"></return><argument index="0" name="object" type="Object"></argument><argument index="1" name="signal" type="String"></argument><description>
				Stop the function execution and return the current state. Call [method GDFunctionState.resume] on the state to resume execution. This invalidates the state.
				Returns anything that was passed to the resume function call. If passed an object and a signal, the execution is resumed when the object's signal is emmited.</description></method></methods><constants><constant name="PI" value="3.141593">
			Constant that represents how many times the diameter of a circumference fits around its perimeter.</constant></constants></class>