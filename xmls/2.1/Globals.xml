<class name="Globals" inherits="Object" category="Core"><brief_description>Contains global variables accessible from everywhere.
</brief_description><description>Contains global variables accessible from everywhere. Use the normal [Object] API, such as "Globals.get(variable)", "Globals.set(variable,value)" or "Globals.has(variable)" to access them. Variables stored in engine.cfg are also loaded into globals, making this object very useful for reading custom game configuration options.
</description><methods><method name="add_property_info"><argument index="0" name="hint" type="Dictionary"></argument><description>Add a custom property info to a property. The dictionary must contain: name:[String](the name of the property) and type:[int](see TYPE_* in [@Global Scope]), and optionally hint:[int](see PROPERTY_HINT_* in [@Global Scope]), hint_string:[String].
Example:
[codeblock]
Globals.set("category/property_name", 0)

var property_info = {
    "name": "category/property_name",
    "type": TYPE_INT,
    "hint": PROPERTY_HINT_ENUM,
    "hint_string": "one,two,three"
}

Globals.add_property_info(property_info)
[/codeblock]
</description></method><method name="clear"><argument index="0" name="name" type="String"></argument><description>Clear the whole configuration (not recommended, may break things).
</description></method><method name="get_order" qualifiers="const"><return type="int"></return><argument index="0" name="name" type="String"></argument><description>Return the order of a configuration value (influences when saved to the config file).
</description></method><method name="get_singleton" qualifiers="const"><return type="Object"></return><argument index="0" name="name" type="String"></argument><description></description></method><method name="globalize_path" qualifiers="const"><return type="String"></return><argument index="0" name="path" type="String"></argument><description>Convert a localized path (res://) to a full native OS path.
</description></method><method name="has" qualifiers="const"><return type="bool"></return><argument index="0" name="name" type="String"></argument><description>Return true if a configuration value is present.
</description></method><method name="has_singleton" qualifiers="const"><return type="bool"></return><argument index="0" name="name" type="String"></argument><description></description></method><method name="is_persisting" qualifiers="const"><return type="bool"></return><argument index="0" name="name" type="String"></argument><description>If returns true, this value can be saved to the configuration file. This is useful for editors.
</description></method><method name="load_resource_pack"><return type="bool"></return><argument index="0" name="pack" type="String"></argument><description></description></method><method name="localize_path" qualifiers="const"><return type="String"></return><argument index="0" name="path" type="String"></argument><description>Convert a path to a localized path (res:// path).
</description></method><method name="save"><return type="int"></return><description></description></method><method name="save_custom"><return type="int"></return><argument index="0" name="file" type="String"></argument><description></description></method><method name="set_order"><argument index="0" name="name" type="String"></argument><argument index="1" name="pos" type="int"></argument><description>Set the order of a configuration value (influences when saved to the config file).
</description></method><method name="set_persisting"><argument index="0" name="name" type="String"></argument><argument index="1" name="enable" type="bool"></argument><description>If set to true, this value can be saved to the configuration file. This is useful for editors.
</description></method></methods><constants></constants></class>