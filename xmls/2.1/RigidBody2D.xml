<class name="RigidBody2D" inherits="PhysicsBody2D" category="Core"><brief_description>Rigid body 2D node.
</brief_description><description>Rigid body 2D node. This node is used for placing rigid bodies in the scene. It can contain a number of shapes, and also shift state between regular Rigid body, Kinematic, Character or Static.
Character mode forbids the node from being rotated. This node can have a custom force integrator function, for writing complex physics motion behavior per node.
As a warning, don't change this node position every frame or very often. Sporadic changes work fine, but physics runs at a different granularity (fixed hz) than usual rendering (process callback) and maybe even in a separate thread, so changing this from a process loop will yield strange behavior.
</description><methods><method name="_integrate_forces" qualifiers="virtual"><argument index="0" name="state" type="Physics2DDirectBodyState"></argument><description>Called during physics processing, allowing you to read and safely modify the simulation state for the object. By default it works in addition to the usual physics behavior, but [method set_use_custom_integrator] allows you to disable the default behavior and do fully custom force integration for a body.
</description></method><method name="add_force"><argument index="0" name="offset" type="Vector2"></argument><argument index="1" name="force" type="Vector2"></argument><description>Add a positioned force to the applied force and torque. As with [method apply_impulse], both the force and the offset from the body origin are in global coordinates.
</description></method><method name="apply_impulse"><argument index="0" name="offset" type="Vector2"></argument><argument index="1" name="impulse" type="Vector2"></argument><description>Apply a positioned impulse (which will be affected by the body mass and shape). This is the equivalent of hitting a billiard ball with a cue: a force that is applied once, and only once. Both the impulse and the offset from the body origin are in global coordinates.
</description></method><method name="get_angular_damp" qualifiers="const"><return type="float"></return><description>Return the angular damp for this body.
</description></method><method name="get_angular_velocity" qualifiers="const"><return type="float"></return><description>Return the body angular velocity. This changes by physics granularity. See [method set_angular_velocity].
</description></method><method name="get_applied_force" qualifiers="const"><return type="Vector2"></return><description>Return the applied force vector.
</description></method><method name="get_applied_torque" qualifiers="const"><return type="float"></return><description>Return the torque which is being applied to this body.
</description></method><method name="get_bounce" qualifiers="const"><return type="float"></return><description>Return the body bounciness.
</description></method><method name="get_colliding_bodies" qualifiers="const"><return type="Array"></return><description>Return a list of the bodies colliding with this one. By default, number of max contacts reported is at 0 , see [method set_max_contacts_reported] to increase it. You must also enable contact monitor, see [method set_contact_monitor]
</description></method><method name="get_continuous_collision_detection_mode" qualifiers="const"><return type="int"></return><description>Return whether this body is using continuous collision detection.
</description></method><method name="get_friction" qualifiers="const"><return type="float"></return><description>Return the body friction.
</description></method><method name="get_gravity_scale" qualifiers="const"><return type="float"></return><description>Return the gravity factor.
</description></method><method name="get_inertia" qualifiers="const"><return type="float"></return><description>Return the body's moment of inertia. This is usually automatically computed from the mass and the shapes. Note that this doesn't seem to work in a [code]_ready[/code] function: it apparently has not been auto-computed yet.
</description></method><method name="get_linear_damp" qualifiers="const"><return type="float"></return><description>Return the linear damp for this body.
</description></method><method name="get_linear_velocity" qualifiers="const"><return type="Vector2"></return><description>Return the body linear velocity. This changes by physics granularity. See [method set_linear_velocity].
</description></method><method name="get_mass" qualifiers="const"><return type="float"></return><description>Return the body mass.
</description></method><method name="get_max_contacts_reported" qualifiers="const"><return type="int"></return><description>Return the maximum contacts that can be reported. See [method set_max_contacts_reported].
</description></method><method name="get_mode" qualifiers="const"><return type="int"></return><description>Return the current body mode, see [method set_mode].
</description></method><method name="get_weight" qualifiers="const"><return type="float"></return><description>Return the body weight given standard earth-weight (gravity 9.8).
</description></method><method name="is_able_to_sleep" qualifiers="const"><return type="bool"></return><description>Return true if the body has the ability to fall asleep when not moving. See [method set_can_sleep].
</description></method><method name="is_contact_monitor_enabled" qualifiers="const"><return type="bool"></return><description>Return whether contact monitoring is enabled.
</description></method><method name="is_sleeping" qualifiers="const"><return type="bool"></return><description>Return whether the body is sleeping.
</description></method><method name="is_using_custom_integrator"><return type="bool"></return><description>Return true if the body is not doing any built-in force integration.
</description></method><method name="set_angular_damp"><argument index="0" name="angular_damp" type="float"></argument><description>Set the angular damp for this body. If this value is different from -1, any angular damp derived from the world or areas will be overridden.
</description></method><method name="set_angular_velocity"><argument index="0" name="angular_velocity" type="float"></argument><description>Set the body angular velocity. Can be used sporadically, but [b]DON'T SET THIS IN EVERY FRAME[/b], because physics may be running in another thread and definitely runs at a different granularity. Use [method _integrate_forces] as your process loop if you want to have precise control of the body state.
</description></method><method name="set_applied_force"><argument index="0" name="force" type="Vector2"></argument><description>Set the applied force vector. This is the equivalent of pushing a box over the ground: the force applied is applied constantly.
</description></method><method name="set_applied_torque"><argument index="0" name="torque" type="float"></argument><description>Set a constant torque which will be applied to this body.
</description></method><method name="set_axis_velocity"><argument index="0" name="axis_velocity" type="Vector2"></argument><description>Set an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.
</description></method><method name="set_bounce"><argument index="0" name="bounce" type="float"></argument><description>Set the body bounciness, from 0 (no bounce) to 1 (full bounce).
</description></method><method name="set_can_sleep"><argument index="0" name="able_to_sleep" type="bool"></argument><description>Set the body ability to fall asleep when not moving. This saves an enormous amount of processor time when there are plenty of rigid bodies (non static) in a scene.
Sleeping bodies are not affected by forces until a collision or an [method apply_impulse] / [method set_applied_force] wakes them up. Until then, they behave like a static body.
</description></method><method name="set_contact_monitor"><argument index="0" name="enabled" type="bool"></argument><description>Enable contact monitoring. This allows the body to emit signals when it collides with another.
</description></method><method name="set_continuous_collision_detection_mode"><argument index="0" name="mode" type="int"></argument><description>Set the continuous collision detection mode from the enum CCD_MODE_*.
Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. The first is more precise, and misses less impacts by small, fast-moving objects. The second is faster to compute, but can miss small, fast-moving objects.
</description></method><method name="set_friction"><argument index="0" name="friction" type="float"></argument><description>Set the body friction, from 0 (frictionless) to 1 (full friction).
</description></method><method name="set_gravity_scale"><argument index="0" name="gravity_scale" type="float"></argument><description>Set the gravity factor. This factor multiplies gravity intensity just for this body.
</description></method><method name="set_inertia"><argument index="0" name="inertia" type="float"></argument><description>Set the body's moment of inertia. This is like mass, but for rotation: it determines how much torque it takes to rotate the body. The moment of inertia is usually computed automatically from the mass and the shapes, but this function allows you to set a custom value. Set 0 (or negative) inertia to return to automatically computing it.
</description></method><method name="set_linear_damp"><argument index="0" name="linear_damp" type="float"></argument><description>Set the linear damp for this body. If this value is different from -1, any linear damp derived from the world or areas will be overridden.
</description></method><method name="set_linear_velocity"><argument index="0" name="linear_velocity" type="Vector2"></argument><description>Set the body linear velocity. Can be used sporadically, but [b]DON'T SET THIS IN EVERY FRAME[/b], because physics may be running in another thread and definitely runs at a different granularity. Use [method _integrate_forces] as your process loop if you want to have precise control of the body state.
</description></method><method name="set_mass"><argument index="0" name="mass" type="float"></argument><description>Set the body mass.
</description></method><method name="set_max_contacts_reported"><argument index="0" name="amount" type="int"></argument><description>Set the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.
</description></method><method name="set_mode"><argument index="0" name="mode" type="int"></argument><description>Set the body mode, from the MODE_* enum. This allows to change to a static body or a character body.
</description></method><method name="set_sleeping"><argument index="0" name="sleeping" type="bool"></argument><description>Set whether a body is sleeping or not. Sleeping bodies are not affected by forces until a collision or an [method apply_impulse] / [method set_applied_force] wakes them up. Until then, they behave like a static body.
</description></method><method name="set_use_custom_integrator"><argument index="0" name="enable" type="bool"></argument><description>Pass true to disable the internal force integration (like gravity or air friction) for this body. Other than collision response, the body will only move as determined by the [method _integrate_forces] function, if defined.
</description></method><method name="set_weight"><argument index="0" name="weight" type="float"></argument><description>Set the body weight given standard earth-weight (gravity 9.8). Not really useful for 2D since most measures for this node are in pixels.
</description></method><method name="test_motion"><return type="bool"></return><argument index="0" name="motion" type="Vector2"></argument><argument index="1" name="margin" type="float" default="0.08"></argument><argument index="2" name="result" type="Physics2DTestMotionResult" default="NULL"></argument><description>Return whether the body would collide, if it tried to move in the given vector. This method allows two extra parameters: A margin, which increases slightly the size of the shapes involved in the collision detection, and an object of type [Physics2DTestMotionResult], which will store additional information about the collision (should there be one).
</description></method></methods><signals><signal name="body_enter"><argument index="0" name="body" type="Object"></argument><description>Emitted when a body enters into contact with this one. Contact monitor and contacts reported must be enabled for this to work.
</description></signal><signal name="body_enter_shape"><argument index="0" name="body_id" type="int"></argument><argument index="1" name="body" type="Object"></argument><argument index="2" name="body_shape" type="int"></argument><argument index="3" name="local_shape" type="int"></argument><description>Emitted when a body enters into contact with this one. Contact monitor and contacts reported must be enabled for this to work.
This signal not only receives the body that collided with this one, but also its [RID] (body_id), the shape index from the colliding body (body_shape), and the shape index from this body (local_shape) the other body collided with.
</description></signal><signal name="body_exit"><argument index="0" name="body" type="Object"></argument><description>Emitted when a body exits contact with this one. Contact monitor and contacts reported must be enabled for this to work.
</description></signal><signal name="body_exit_shape"><argument index="0" name="body_id" type="int"></argument><argument index="1" name="body" type="Object"></argument><argument index="2" name="body_shape" type="int"></argument><argument index="3" name="local_shape" type="int"></argument><description>Emitted when a body shape exits contact with this one. Contact monitor and contacts reported must be enabled for this to work.
This signal not only receives the body that stopped colliding with this one, but also its [RID] (body_id), the shape index from the colliding body (body_shape), and the shape index from this body (local_shape) the other body stopped colliding with.
</description></signal><signal name="sleeping_state_changed"><description>Emitted when the body changes its sleeping state. Either by sleeping or waking up.
</description></signal></signals><constants><constant name="MODE_STATIC" value="1">Static mode. The body behaves like a [StaticBody2D], and can only move by user code.
</constant><constant name="MODE_KINEMATIC" value="3">Kinematic body. The body behaves like a [KinematicBody2D], and can only move by user code.
</constant><constant name="MODE_RIGID" value="0">Rigid body. This is the "natural" state of a rigid body. It is affected by forces, and can move, rotate, and be affected by user code.
</constant><constant name="MODE_CHARACTER" value="2">Character body. This behaves like a rigid body, but can not rotate.
</constant><constant name="CCD_MODE_DISABLED" value="0">Disables continuous collision detection. This is the fastest way to detect body collisions, but can miss small, fast-moving objects.
</constant><constant name="CCD_MODE_CAST_RAY" value="1">Enables continuous collision detection by raycasting. It is faster than shapecasting, but less precise.
</constant><constant name="CCD_MODE_CAST_SHAPE" value="2">Enables continuous collision detection by shapecasting. It is the slowest CCD method, and the most precise.
</constant></constants></class>