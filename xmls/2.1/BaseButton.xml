<class category="Core" inherits="Control" name="BaseButton"><brief_description>
		Provides a base class for different kinds of buttons.</brief_description><description>
		BaseButton is the abstract base class for buttons, so it shouldn't be used directly (It doesn't display anything). Other types of buttons inherit from it.</description><methods><method name="_pressed" qualifiers="virtual"><description>
				Called when button is pressed.</description></method><method name="_toggled" qualifiers="virtual"><argument index="0" name="pressed" type="bool"></argument><description>
				Called when button is toggled (only if toggle_mode is active).</description></method><method name="get_click_on_press" qualifiers="const"><return type="bool"></return><description>
				Return the state of the click_on_press property (see [method set_click_on_press]).</description></method><method name="get_draw_mode" qualifiers="const"><return type="int"></return><description>
				Return the visual state used to draw the button. This is useful mainly when implementing your own draw code by either overriding _draw() or connecting to "draw" signal. The visual state of the button is defined by the DRAW_* enum.</description></method><method name="get_enabled_focus_mode" qualifiers="const"><return type="int"></return><description>
				Returns focus access mode used when switching between enabled/disabled (see [method Control.set_focus_mode] and [method set_disabled]).</description></method><method name="get_shortcut" qualifiers="const"><return type="Object"></return><description></description></method><method name="is_disabled" qualifiers="const"><return type="bool"></return><description>
				Return whether the button is in disabled state (see [method set_disabled]).</description></method><method name="is_hovered" qualifiers="const"><return type="bool"></return><description>
				Return true if mouse entered the button before it exit.</description></method><method name="is_pressed" qualifiers="const"><return type="bool"></return><description>
				If toggle_mode is active, return whether the button is toggled. If toggle_mode is not active, return whether the button is pressed down.</description></method><method name="is_toggle_mode" qualifiers="const"><return type="bool"></return><description>
				Return the toggle_mode property (see [method set_toggle_mode]).</description></method><method name="set_click_on_press"><argument index="0" name="enable" type="bool"></argument><description>
				Set the button click_on_press mode. This mode generates click events when a mouse button or key is just pressed (by default events are generated when the button/keys are released and both press and release occur in the visual area of the Button).</description></method><method name="set_disabled"><argument index="0" name="disabled" type="bool"></argument><description>
				Set the button into disabled state. When a button is disabled, it can't be clicked or toggled.</description></method><method name="set_enabled_focus_mode"><argument index="0" name="mode" type="int"></argument><description>
				Sets the focus access mode to use when switching between enabled/disabled (see [method Control.set_focus_mode] and [method set_disabled]).</description></method><method name="set_pressed"><argument index="0" name="pressed" type="bool"></argument><description>
				Set the button to pressed state (only if toggle_mode is active).</description></method><method name="set_shortcut"><argument index="0" name="shortcut" type="Object"></argument><description></description></method><method name="set_toggle_mode"><argument index="0" name="enabled" type="bool"></argument><description>
				Set the button toggle_mode property. Toggle mode makes the button flip state between pressed and unpressed each time its area is clicked.</description></method></methods><signals><signal name="button_down"><description>
				Emitted when the button starts being held down.</description></signal><signal name="button_up"><description>
				Emitted when the button stops being held down.</description></signal><signal name="pressed"><description>
				This signal is emitted every time the button is toggled or pressed (i.e. activated, so on [code]button_down[/code] if "Click on press" is active and on [code]button_up[/code] otherwise).</description></signal><signal name="released"><description>
				Emitted when the button was released. This is only emitted by non-toggle buttons and if "Click on press" is active.</description></signal><signal name="toggled"><argument index="0" name="pressed" type="bool"></argument><description>
				This signal is emitted when the button was just toggled between pressed and normal states (only if toggle_mode is active). The new state is contained in the [i]pressed[/i] argument.</description></signal></signals><constants><constant name="DRAW_NORMAL" value="0">
			The normal state (i.e. not pressed, not hovered, not toggled and enabled) of buttons.</constant><constant name="DRAW_PRESSED" value="1">
			The state of buttons are pressed.</constant><constant name="DRAW_HOVER" value="2">
			The state of buttons are hovered.</constant><constant name="DRAW_DISABLED" value="3">
			The state of buttons are disabled.</constant></constants></class>