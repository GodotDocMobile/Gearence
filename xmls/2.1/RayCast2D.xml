<class category="Core" inherits="Node2D" name="RayCast2D"><brief_description>
		Query the closest object intersecting a ray.</brief_description><description>
		A RayCast2D represents a line from its origin to its destination position [code]cast_to[/code], it is used to query the 2D space in order to find the closest object intersecting with the ray.

		RayCast2D can ignore some objects by adding them to the exception list via [code]add_exception[/code], setting proper filtering with layers, or by filtering object types with type masks.

		Only enabled raycasts will be able to query the space and report collisions!

		RayCast2D calculates intersection every fixed frame (see [Node]), and the result is cached so it can be used later until the next frame. If multiple queries are required between fixed frames (or during the same frame) use [method force_raycast_update] after adjusting the raycast.</description><methods><method name="add_exception"><argument index="0" name="node" type="Object"></argument><description>
				Adds a collision exception so the ray does not report collisions with the specified [code]node[/code].</description></method><method name="add_exception_rid"><argument index="0" name="rid" type="RID"></argument><description></description></method><method name="clear_exceptions"><description>
				Removes all collision exception for this ray.</description></method><method name="force_raycast_update"><description>
				Updates the collision information in case if this object's properties changed during the current frame (for example position, rotation or the cast_point). Note, [code]set_enabled[/code] is not required for this to work.</description></method><method name="get_cast_to" qualifiers="const"><return type="Vector2"></return><description>
				Return the destination point of this ray object.</description></method><method name="get_collider" qualifiers="const"><return type="Object"></return><description>
				Return the closest object the ray is pointing to. Note that this does not consider the length of the vector, so you must also use [method is_colliding] to check if the object returned is actually colliding with the ray.</description></method><method name="get_collider_shape" qualifiers="const"><return type="int"></return><description>
				Returns the collision shape of the closest object the ray is pointing to.</description></method><method name="get_collision_normal" qualifiers="const"><return type="Vector2"></return><description>
				Returns the normal of the intersecting object shape face containing the collision point.</description></method><method name="get_collision_point" qualifiers="const"><return type="Vector2"></return><description>
				Returns the collision point in which the ray intersects the closest object. This point is in [b]global[/b] coordinate system.</description></method><method name="get_layer_mask" qualifiers="const"><return type="int"></return><description>
				Returns the layer mask for this ray.</description></method><method name="get_type_mask" qualifiers="const"><return type="int"></return><description>
				Returns the type mask (types of objects to detect) for this ray. The value is a sum (bitwise OR'd) of constants available for [Physics2DDirectSpaceState].</description></method><method name="is_colliding" qualifiers="const"><return type="bool"></return><description>
				Return whether the closest object the ray is pointing to is colliding with the vector (considering the vector length).</description></method><method name="is_enabled" qualifiers="const"><return type="bool"></return><description>
				Returns whether this raycast is enabled or not.</description></method><method name="remove_exception"><argument index="0" name="node" type="Object"></argument><description>
				Removes a collision exception so the ray does report collisions with the specified [code]node[/code].</description></method><method name="remove_exception_rid"><argument index="0" name="rid" type="RID"></argument><description></description></method><method name="set_cast_to"><argument index="0" name="local_point" type="Vector2"></argument><description>
				Sets the ray destination point, so that the ray will test from the ray's origin to [code]local_point[/code]</description></method><method name="set_enabled"><argument index="0" name="enabled" type="bool"></argument><description>
				Enables the RayCast2D. Only enabled raycasts will be able to query the space and report collisions.</description></method><method name="set_layer_mask"><argument index="0" name="mask" type="int"></argument><description>
				Set the mask to filter objects. Only objects with at least the same mask element set will be detected.</description></method><method name="set_type_mask"><argument index="0" name="mask" type="int"></argument><description>
				Set the types of objects to detect. For [code]mask[/code] use a logic sum (OR operation) of constants defined in [Physics2DDirectSpaceState], eg. [code]Physics2DDirectSpaceState.TYPE_MASK_STATIC_BODY | Physics2DDirectSpaceState.TYPE_MASK_KINEMATIC_BODY[/code] to detect only those two types.</description></method></methods><constants></constants></class>