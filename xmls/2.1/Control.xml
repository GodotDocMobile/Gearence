<class name="Control" inherits="CanvasItem" category="Core"><brief_description>Control is the base node for all the GUI components.
</brief_description><description>Control is the base class Node for all the GUI components. Every GUI component inherits from it, directly or indirectly. In this way, sections of the scene tree made of contiguous control nodes, become user interfaces.
Controls are relative to the parent position and size by using anchors and margins. This ensures that they can adapt easily in most situation to changing dialog and screen sizes. When more flexibility is desired, [Container] derived nodes can be used.
Anchors work by defining which margin do they follow, and a value relative to it. Allowed anchoring modes are ANCHOR_BEGIN, where the margin is relative to the top or left margins of the parent (in pixels), ANCHOR_END for the right and bottom margins of the parent and ANCHOR_RATIO, which is a ratio from 0 to 1 in the parent range.
Input device events ([InputEvent]) are first sent to the root controls via the [method Node._input], which distribute it through the tree, then delivers them to the adequate one (under cursor or keyboard focus based) by calling [method MainLoop._input_event]. There is no need to enable input processing on controls to receive such events. To ensure that no one else will receive the event (not even [method Node._unhandled_input]), the control can accept it by calling [method accept_event].
Only one control can hold the keyboard focus (receiving keyboard events), for that the control must define the focus mode with [method set_focus_mode]. Focus is lost when another control gains it, or the current focus owner is hidden.
It is sometimes desired for a control to ignore mouse/pointer events. This is often the case when placing other controls on top of a button, in such cases. Calling [method set_ignore_mouse] enables this function.
Finally, controls are skinned according to a [Theme]. Setting a [Theme] on a control will propagate all the skinning down the tree. Optionally, skinning can be overridden per each control by calling the add_*_override functions, or from the editor.
</description><methods><method name="_input_event" qualifiers="virtual"><argument index="0" name="event" type="InputEvent"></argument><description>Called when an input event reaches the control.
</description></method><method name="accept_event"><description>Handles the event, no other control will receive it and it will not be sent to nodes waiting on [method Node._unhandled_input] or [method Node._unhandled_key_input].
</description></method><method name="add_color_override"><argument index="0" name="name" type="String"></argument><argument index="1" name="color" type="Color"></argument><description></description></method><method name="add_constant_override"><argument index="0" name="name" type="String"></argument><argument index="1" name="constant" type="int"></argument><description>Override a single constant (integer) in the theme of this Control. If constant equals Theme.INVALID_CONSTANT, override is cleared.
</description></method><method name="add_font_override"><argument index="0" name="name" type="String"></argument><argument index="1" name="font" type="Font"></argument><description>Override a single font (font) in the theme of this Control. If font is empty, override is cleared.
</description></method><method name="add_icon_override"><argument index="0" name="name" type="String"></argument><argument index="1" name="texture" type="Texture"></argument><description>Override a single icon ([Texture]) in the theme of this Control. If texture is empty, override is cleared.
</description></method><method name="add_shader_override"><argument index="0" name="name" type="String"></argument><argument index="1" name="shader" type="Shader"></argument><description></description></method><method name="add_style_override"><argument index="0" name="name" type="String"></argument><argument index="1" name="stylebox" type="StyleBox"></argument><description>Override a single stylebox ([Stylebox]) in the theme of this Control. If stylebox is empty, override is cleared.
</description></method><method name="can_drop_data" qualifiers="virtual"><return type="bool"></return><argument index="0" name="pos" type="Vector2"></argument><argument index="1" name="data" type="Variant"></argument><description></description></method><method name="drop_data" qualifiers="virtual"><argument index="0" name="pos" type="Vector2"></argument><argument index="1" name="data" type="Variant"></argument><description></description></method><method name="force_drag"><argument index="0" name="data" type="Variant"></argument><argument index="1" name="preview" type="Object"></argument><description></description></method><method name="get_anchor" qualifiers="const"><return type="int"></return><argument index="0" name="margin" type="int"></argument><description>Return the anchor type (ANCHOR_BEGIN, ANCHOR_END, ANCHOR_RATIO) for a given margin (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM).
</description></method><method name="get_begin" qualifiers="const"><return type="Vector2"></return><description></description></method><method name="get_color" qualifiers="const"><return type="Color"></return><argument index="0" name="name" type="String"></argument><argument index="1" name="type" type="String" default="&quot;&quot;"></argument><description></description></method><method name="get_combined_minimum_size" qualifiers="const"><return type="Vector2"></return><description></description></method><method name="get_constant" qualifiers="const"><return type="int"></return><argument index="0" name="name" type="String"></argument><argument index="1" name="type" type="String" default="&quot;&quot;"></argument><description></description></method><method name="get_cursor_shape" qualifiers="const"><return type="int"></return><argument index="0" name="pos" type="Vector2" default="Vector2(0, 0)"></argument><description>Return the cursor shape at a certain position in the control.
</description></method><method name="get_custom_minimum_size" qualifiers="const"><return type="Vector2"></return><description></description></method><method name="get_default_cursor_shape" qualifiers="const"><return type="int"></return><description>Return the default cursor shape for this control. See enum CURSOR_* for the list of shapes.
</description></method><method name="get_drag_data" qualifiers="virtual"><return type="Object"></return><argument index="0" name="pos" type="Vector2"></argument><description></description></method><method name="get_end" qualifiers="const"><return type="Vector2"></return><description>Returns MARGIN_LEFT and MARGIN_TOP at the same time. This is a helper (see [method set_margin]).
</description></method><method name="get_focus_mode" qualifiers="const"><return type="int"></return><description>Returns the focus access mode for the control (FOCUS_NONE, FOCUS_CLICK, FOCUS_ALL) (see [method set_focus_mode]).
</description></method><method name="get_focus_neighbour" qualifiers="const"><return type="NodePath"></return><argument index="0" name="margin" type="int"></argument><description>Return the forced neighbour for moving the input focus to. When pressing TAB or directional/joypad directions focus is moved to the next control in that direction. However, the neighbour to move to can be forced with this function.
</description></method><method name="get_focus_owner" qualifiers="const"><return type="Control"></return><description>Return which control is owning the keyboard focus, or null if no one.
</description></method><method name="get_font" qualifiers="const"><return type="Font"></return><argument index="0" name="name" type="String"></argument><argument index="1" name="type" type="String" default="&quot;&quot;"></argument><description></description></method><method name="get_global_pos" qualifiers="const"><return type="Vector2"></return><description>Returns the Control position, relative to the top-left corner of the parent Control and independent of the anchor mode.
</description></method><method name="get_global_rect" qualifiers="const"><return type="Rect2"></return><description>Return position and size of the Control, relative to the top-left corner of the [i]window[/i] Control. This is a helper (see [method get_global_pos], [method get_size]).
</description></method><method name="get_h_size_flags" qualifiers="const"><return type="int"></return><description>Hint for containers, return horizontal positioning flags.
</description></method><method name="get_icon" qualifiers="const"><return type="Texture"></return><argument index="0" name="name" type="String"></argument><argument index="1" name="type" type="String" default="&quot;&quot;"></argument><description></description></method><method name="get_margin" qualifiers="const"><return type="float"></return><argument index="0" name="margin" type="int"></argument><description>Return a margin offset. Margin can be one of (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM). Offset value being returned depends on the anchor mode.
</description></method><method name="get_minimum_size" qualifiers="const"><return type="Vector2"></return><description>Return the minimum size this Control can shrink to. A control will never be displayed or resized smaller than its minimum size.
</description></method><method name="get_minimum_size" qualifiers="virtual"><return type="Vector2"></return><description>Return the minimum size this Control can shrink to. A control will never be displayed or resized smaller than its minimum size.
</description></method><method name="get_parent_area_size" qualifiers="const"><return type="Vector2"></return><description></description></method><method name="get_parent_control" qualifiers="const"><return type="Control"></return><description></description></method><method name="get_pos" qualifiers="const"><return type="Vector2"></return><description>Returns the Control position, relative to the top-left corner of the parent Control and independent of the anchor mode.
</description></method><method name="get_rect" qualifiers="const"><return type="Rect2"></return><description>Return position and size of the Control, relative to the top-left corner of the parent Control. This is a helper (see [method get_pos], [method get_size]).
</description></method><method name="get_rotation" qualifiers="const"><return type="float"></return><description></description></method><method name="get_rotation_deg" qualifiers="const"><return type="float"></return><description></description></method><method name="get_scale" qualifiers="const"><return type="Vector2"></return><description></description></method><method name="get_size" qualifiers="const"><return type="Vector2"></return><description>Returns the size of the Control, computed from all margins, however the size returned will [b]never be smaller than the minimum size reported by[/b] [method get_minimum_size]. This means that even if end position of the Control rectangle is smaller than the begin position, the Control will still display and interact correctly. (see description, [method get_minimum_size], [method set_margin], [method set_anchor]).
</description></method><method name="get_stretch_ratio" qualifiers="const"><return type="float"></return><description>Hint for containers, return the stretch ratio. This value is relative to other stretch ratio, so if this control has 2 and another has 1, this one will be twice as big.
</description></method><method name="get_stylebox" qualifiers="const"><return type="StyleBox"></return><argument index="0" name="name" type="String"></argument><argument index="1" name="type" type="String" default="&quot;&quot;"></argument><description></description></method><method name="get_theme" qualifiers="const"><return type="Theme"></return><description>Return a [Theme] override, if one exists (see [method set_theme]).
</description></method><method name="get_tooltip" qualifiers="const"><return type="String"></return><argument index="0" name="atpos" type="Vector2" default="Vector2(0, 0)"></argument><description>Return the tooltip, which will appear when the cursor is resting over this control.
</description></method><method name="get_v_size_flags" qualifiers="const"><return type="int"></return><description>Hint for containers, return vertical positioning flags.
</description></method><method name="grab_click_focus"><description></description></method><method name="grab_focus"><description>Steal the focus from another control and become the focused control (see [method set_focus_mode]).
</description></method><method name="has_color" qualifiers="const"><return type="bool"></return><argument index="0" name="name" type="String"></argument><argument index="1" name="type" type="String" default="&quot;&quot;"></argument><description></description></method><method name="has_color_override" qualifiers="const"><return type="bool"></return><argument index="0" name="name" type="String"></argument><description></description></method><method name="has_constant" qualifiers="const"><return type="bool"></return><argument index="0" name="name" type="String"></argument><argument index="1" name="type" type="String" default="&quot;&quot;"></argument><description></description></method><method name="has_constant_override" qualifiers="const"><return type="bool"></return><argument index="0" name="name" type="String"></argument><description></description></method><method name="has_focus" qualifiers="const"><return type="bool"></return><description>Return whether the Control is the current focused control (see [method set_focus_mode]).
</description></method><method name="has_font" qualifiers="const"><return type="bool"></return><argument index="0" name="name" type="String"></argument><argument index="1" name="type" type="String" default="&quot;&quot;"></argument><description></description></method><method name="has_font_override" qualifiers="const"><return type="bool"></return><argument index="0" name="name" type="String"></argument><description></description></method><method name="has_icon" qualifiers="const"><return type="bool"></return><argument index="0" name="name" type="String"></argument><argument index="1" name="type" type="String" default="&quot;&quot;"></argument><description></description></method><method name="has_icon_override" qualifiers="const"><return type="bool"></return><argument index="0" name="name" type="String"></argument><description></description></method><method name="has_point" qualifiers="virtual"><argument index="0" name="point" type="Vector2"></argument><description></description></method><method name="has_stylebox" qualifiers="const"><return type="bool"></return><argument index="0" name="name" type="String"></argument><argument index="1" name="type" type="String" default="&quot;&quot;"></argument><description></description></method><method name="has_stylebox_override" qualifiers="const"><return type="bool"></return><argument index="0" name="name" type="String"></argument><description></description></method><method name="is_ignoring_mouse" qualifiers="const"><return type="bool"></return><description>Return if the control is ignoring mouse events (even touchpad events send mouse events).
</description></method><method name="is_stopping_mouse" qualifiers="const"><return type="bool"></return><description></description></method><method name="minimum_size_changed"><description></description></method><method name="release_focus"><description>Give up the focus, no other control will be able to receive keyboard input.
</description></method><method name="set_anchor"><argument index="0" name="margin" type="int"></argument><argument index="1" name="anchor_mode" type="int"></argument><argument index="2" name="keep_margin" type="bool" default="false"></argument><description>Change the anchor (ANCHOR_BEGIN, ANCHOR_END, ANCHOR_RATIO) type for a margin (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM). Changing the anchor mode converts the current margin offset from the previous anchor mode to the new one, so margin offsets ([method set_margin]) must be done after setting anchors, or at the same time ([method set_anchor_and_margin])
Additionally, [code]keep_margin[/code] controls whether margins should be left the same, or changed to keep the same position and size on-screen.
</description></method><method name="set_anchor_and_margin"><argument index="0" name="margin" type="int"></argument><argument index="1" name="anchor_mode" type="int"></argument><argument index="2" name="offset" type="float"></argument><description>Change the anchor (ANCHOR_BEGIN, ANCHOR_END, ANCHOR_RATIO) type for a margin (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM), and also set its offset. This is a helper (see [method set_anchor] and [method set_margin]).
</description></method><method name="set_area_as_parent_rect"><argument index="0" name="margin" type="int" default="0"></argument><description>Change all margins and anchors, so this Control always takes up the same area as the parent Control. This is a helper (see [method set_anchor], [method set_margin]).
</description></method><method name="set_begin"><argument index="0" name="pos" type="Vector2"></argument><description>Sets MARGIN_LEFT and MARGIN_TOP at the same time. This is a helper (see [method set_margin]).
</description></method><method name="set_custom_minimum_size"><argument index="0" name="size" type="Vector2"></argument><description></description></method><method name="set_default_cursor_shape"><argument index="0" name="shape" type="int"></argument><description>Set the default cursor shape for this control. See enum CURSOR_* for the list of shapes.
</description></method><method name="set_drag_forwarding"><argument index="0" name="target" type="Control"></argument><description></description></method><method name="set_drag_preview"><argument index="0" name="control" type="Control"></argument><description></description></method><method name="set_end"><argument index="0" name="pos" type="Vector2"></argument><description>Sets MARGIN_RIGHT and MARGIN_BOTTOM at the same time. This is a helper (see [method set_margin]).
</description></method><method name="set_focus_mode"><argument index="0" name="mode" type="int"></argument><description>Set the focus access mode for the control (FOCUS_NONE, FOCUS_CLICK, FOCUS_ALL). Only one Control can be focused at the same time, and it will receive keyboard signals.
</description></method><method name="set_focus_neighbour"><argument index="0" name="margin" type="int"></argument><argument index="1" name="neighbour" type="NodePath"></argument><description>Force a neighbour for moving the input focus to. When pressing TAB or directional/joypad directions focus is moved to the next control in that direction. However, the neighbour to move to can be forced with this function.
</description></method><method name="set_global_pos"><argument index="0" name="pos" type="Vector2"></argument><description>Move the Control to a new position, relative to the top-left corner of the [i]window[/i] Control, and without changing current anchor mode. (see [method set_margin]).
</description></method><method name="set_h_size_flags"><argument index="0" name="flags" type="int"></argument><description>Hint for containers, set horizontal positioning flags.
</description></method><method name="set_ignore_mouse"><argument index="0" name="ignore" type="bool"></argument><description>Ignore mouse events on this control (even touchpad events send mouse events).
</description></method><method name="set_margin"><argument index="0" name="margin" type="int"></argument><argument index="1" name="offset" type="float"></argument><description>Set a margin offset. Margin can be one of (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM). Offset value being set depends on the anchor mode.
</description></method><method name="set_pos"><argument index="0" name="pos" type="Vector2"></argument><description>Move the Control to a new position, relative to the top-left corner of the parent Control, changing all margins if needed and without changing current anchor mode. This is a helper (see [method set_margin]).
</description></method><method name="set_rotation"><argument index="0" name="radians" type="float"></argument><description></description></method><method name="set_rotation_deg"><argument index="0" name="degrees" type="float"></argument><description></description></method><method name="set_scale"><argument index="0" name="scale" type="Vector2"></argument><description></description></method><method name="set_size"><argument index="0" name="size" type="Vector2"></argument><description>Changes MARGIN_RIGHT and MARGIN_BOTTOM to fit a given size. This is a helper (see [method set_margin]).
</description></method><method name="set_stop_mouse"><argument index="0" name="stop" type="bool"></argument><description></description></method><method name="set_stretch_ratio"><argument index="0" name="ratio" type="float"></argument><description>Hint for containers, set the stretch ratio. This value is relative to other stretch ratio, so if this control has 2 and another has 1, this one will be twice as big.
</description></method><method name="set_theme"><argument index="0" name="theme" type="Theme"></argument><description>Override whole the [Theme] for this Control and all its children controls.
</description></method><method name="set_tooltip"><argument index="0" name="tooltip" type="String"></argument><description>Set a tooltip, which will appear when the cursor is resting over this control.
</description></method><method name="set_v_size_flags"><argument index="0" name="flags" type="int"></argument><description>Hint for containers, set vertical positioning flags.
</description></method><method name="show_modal"><argument index="0" name="exclusive" type="bool" default="false"></argument><description>Display a Control as modal. Control must be a subwindow. Modal controls capture the input signals until closed or the area outside them is accessed. When a modal control loses focus, or the ESC key is pressed, they automatically hide. Modal controls are used extensively for popup dialogs and menus.
</description></method><method name="warp_mouse"><argument index="0" name="to_pos" type="Vector2"></argument><description></description></method></methods><signals><signal name="focus_enter"><description>Emitted when keyboard focus is gained.
</description></signal><signal name="focus_exit"><description>Emitted when the keyboard focus is lost.
</description></signal><signal name="input_event"><argument index="0" name="ev" type="InputEvent"></argument><description>Emitted when an input event is received. Connecting in realtime is recommended for accepting the events.
</description></signal><signal name="minimum_size_changed"><description>Emitted when the minimum size of the control changed.
</description></signal><signal name="modal_close"><description></description></signal><signal name="mouse_enter"><description>Emitted when the mouse enters the control area.
</description></signal><signal name="mouse_exit"><description>Emitted when the mouse left the control area.
</description></signal><signal name="resized"><description>Emitted when the control changed size.
</description></signal><signal name="size_flags_changed"><description>Emitted when the size flags changed.
</description></signal></signals><constants><constant name="ANCHOR_BEGIN" value="0">X is relative to MARGIN_LEFT, Y is relative to MARGIN_TOP.
</constant><constant name="ANCHOR_END" value="1">X is relative to -MARGIN_RIGHT, Y is relative to -MARGIN_BOTTOM.
</constant><constant name="ANCHOR_RATIO" value="2">X and Y are a ratio (0 to 1) relative to the parent size 0 is left/top, 1 is right/bottom.
</constant><constant name="ANCHOR_CENTER" value="3"></constant><constant name="FOCUS_NONE" value="0">Control can't acquire focus.
</constant><constant name="FOCUS_CLICK" value="1">Control can acquire focus only if clicked.
</constant><constant name="FOCUS_ALL" value="2">Control can acquire focus if clicked, or by pressing TAB/Directionals in the keyboard from another Control.
</constant><constant name="NOTIFICATION_RESIZED" value="40">Control changed size (get_size() reports the new size).
</constant><constant name="NOTIFICATION_MOUSE_ENTER" value="41">Mouse pointer entered the area of the Control.
</constant><constant name="NOTIFICATION_MOUSE_EXIT" value="42">Mouse pointer exited the area of the Control.
</constant><constant name="NOTIFICATION_FOCUS_ENTER" value="43">Control gained focus.
</constant><constant name="NOTIFICATION_FOCUS_EXIT" value="44">Control lost focus.
</constant><constant name="NOTIFICATION_THEME_CHANGED" value="45">Theme changed. Redrawing is desired.
</constant><constant name="NOTIFICATION_MODAL_CLOSE" value="46">Modal control was closed.
</constant><constant name="NOTIFICATION_SCROLL_BEGIN" value="47"></constant><constant name="NOTIFICATION_SCROLL_END" value="48"></constant><constant name="CURSOR_ARROW" value="0"></constant><constant name="CURSOR_IBEAM" value="1"></constant><constant name="CURSOR_POINTING_HAND" value="2"></constant><constant name="CURSOR_CROSS" value="3"></constant><constant name="CURSOR_WAIT" value="4"></constant><constant name="CURSOR_BUSY" value="5"></constant><constant name="CURSOR_DRAG" value="6"></constant><constant name="CURSOR_CAN_DROP" value="7"></constant><constant name="CURSOR_FORBIDDEN" value="8"></constant><constant name="CURSOR_VSIZE" value="9"></constant><constant name="CURSOR_HSIZE" value="10"></constant><constant name="CURSOR_BDIAGSIZE" value="11"></constant><constant name="CURSOR_FDIAGSIZE" value="12"></constant><constant name="CURSOR_MOVE" value="13"></constant><constant name="CURSOR_VSPLIT" value="14"></constant><constant name="CURSOR_HSPLIT" value="15"></constant><constant name="CURSOR_HELP" value="16"></constant><constant name="SIZE_EXPAND" value="1"></constant><constant name="SIZE_FILL" value="2"></constant><constant name="SIZE_EXPAND_FILL" value="3"></constant></constants></class>