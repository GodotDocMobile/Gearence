<class name="Thread" inherits="Reference" category="Core"><brief_description>A unit of execution in a process.
</brief_description><description>A unit of execution in a process. Can run methods on [Object]\ s simultaneously. The use of synchronization via [Mutex], [Semaphore] is advised if working with shared objects.
</description><methods><method name="get_id" qualifiers="const"><return type="String"></return><description>Return the id of the thread, uniquely identifying it among all threads.
</description></method><method name="is_active" qualifiers="const"><return type="bool"></return><description>Whether this thread is currently active, an active Thread cannot start work on a new method but can be joined with [method wait_to_finish].
</description></method><method name="start"><return type="Error"></return><argument index="0" name="instance" type="Object"></argument><argument index="1" name="method" type="String"></argument><argument index="2" name="userdata" type="Variant" default="NULL"></argument><argument index="3" name="priority" type="int" default="1"></argument><description>Start a new [Thread], it will run "method" on object "instance" using "userdata" as an argument and running with "priority", one of PRIORITY_* enum.
Returns OK on success, or ERR_CANT_CREATE on failure.
</description></method><method name="wait_to_finish"><return type="Variant"></return><description>Joins the [Thread] and waits for it to finish. Returns what the method called returned.
</description></method></methods><constants><constant name="PRIORITY_LOW" value="0"></constant><constant name="PRIORITY_NORMAL" value="1"></constant><constant name="PRIORITY_HIGH" value="2"></constant></constants></class>