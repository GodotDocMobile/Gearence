<?xml version="1.0" encoding="UTF-8" ?>
<class name="Array" category="Built-In Types" version="3.0.7">
	<brief_description>
		Generic array datatype.
	</brief_description>
	<description>
		Generic array, contains several elements of any type, accessible by a numerical index starting at 0. Negative indices can be used to count from the back, like in Python (-1 is the last element, -2 the second to last, etc.). Example:
		[codeblock]
		var array = ["One", 2, 3, "Four"]
		print(array[0])   # One
		print(array[2])   # 3
		print(array[-1])  # Four
		array[2] = "Three"
		print(array[-2])  # Three
		[/codeblock]
		Arrays are always passed by reference.
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="Array">
			<return type="Array">
			</return>
			<argument index="0" name="from" type="PoolColorArray">
			</argument>
			<description>
				Construct an array from a [PoolColorArray].
			</description>
		</method>
		<method name="Array">
			<return type="Array">
			</return>
			<argument index="0" name="from" type="PoolVector3Array">
			</argument>
			<description>
				Construct an array from a [PoolVector3Array].
			</description>
		</method>
		<method name="Array">
			<return type="Array">
			</return>
			<argument index="0" name="from" type="PoolVector2Array">
			</argument>
			<description>
				Construct an array from a [PoolVector2Array].
			</description>
		</method>
		<method name="Array">
			<return type="Array">
			</return>
			<argument index="0" name="from" type="PoolStringArray">
			</argument>
			<description>
				Construct an array from a [PoolStringArray].
			</description>
		</method>
		<method name="Array">
			<return type="Array">
			</return>
			<argument index="0" name="from" type="PoolRealArray">
			</argument>
			<description>
				Construct an array from a [PoolRealArray].
			</description>
		</method>
		<method name="Array">
			<return type="Array">
			</return>
			<argument index="0" name="from" type="PoolIntArray">
			</argument>
			<description>
				Construct an array from a [PoolIntArray].
			</description>
		</method>
		<method name="Array">
			<return type="Array">
			</return>
			<argument index="0" name="from" type="PoolByteArray">
			</argument>
			<description>
				Construct an array from a [PoolByteArray].
			</description>
		</method>
		<method name="append">
			<argument index="0" name="value" type="Variant">
			</argument>
			<description>
				Append an element at the end of the array (alias of [method push_back]).
			</description>
		</method>
		<method name="back">
			<return type="Variant">
			</return>
			<description>
				Returns the last element of the array if the array is not empty (size&gt;0).
			</description>
		</method>
		<method name="bsearch">
			<return type="int">
			</return>
			<argument index="0" name="value" type="Variant">
			</argument>
			<argument index="1" name="before" type="bool" default="True">
			</argument>
			<description>
				Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a before specifier can be passed. If false, the returned index comes after all existing entries of the value in the array. Note that calling bsearch on an unsorted array results in unexpected behavior.
			</description>
		</method>
		<method name="bsearch_custom">
			<return type="int">
			</return>
			<argument index="0" name="value" type="Variant">
			</argument>
			<argument index="1" name="obj" type="Object">
			</argument>
			<argument index="2" name="func" type="String">
			</argument>
			<argument index="3" name="before" type="bool" default="True">
			</argument>
			<description>
				Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search and a custom comparison method. Optionally, a before specifier can be passed. If false, the returned index comes after all existing entries of the value in the array. The custom method receives two arguments (an element from the array and the value searched for) and must return true if the first argument is less than the second, and return false otherwise. Note that calling bsearch on an unsorted array results in unexpected behavior.
			</description>
		</method>
		<method name="clear">
			<description>
				Clear the array (resize to 0).
			</description>
		</method>
		<method name="count">
			<return type="int">
			</return>
			<argument index="0" name="value" type="Variant">
			</argument>
			<description>
				Return the amount of times an element is in the array.
			</description>
		</method>
		<method name="duplicate">
			<return type="Array">
			</return>
			<description>
				Returns a copy of this [code]Array[/code].
			</description>
		</method>
		<method name="empty">
			<return type="bool">
			</return>
			<description>
				Return true if the array is empty (size==0).
			</description>
		</method>
		<method name="erase">
			<argument index="0" name="value" type="Variant">
			</argument>
			<description>
				Remove the first occurrence of a value from the array.
			</description>
		</method>
		<method name="find">
			<return type="int">
			</return>
			<argument index="0" name="what" type="Variant">
			</argument>
			<argument index="1" name="from" type="int" default="0">
			</argument>
			<description>
				Searches the array for a value and returns its index or -1 if not found. Optionally, the initial search index can be passed.
			</description>
		</method>
		<method name="find_last">
			<return type="int">
			</return>
			<argument index="0" name="value" type="Variant">
			</argument>
			<description>
				Searches the array in reverse order for a value and returns its index or -1 if not found.
			</description>
		</method>
		<method name="front">
			<return type="Variant">
			</return>
			<description>
				Returns the first element of the array if the array is not empty (size&gt;0).
			</description>
		</method>
		<method name="has">
			<return type="bool">
			</return>
			<argument index="0" name="value" type="Variant">
			</argument>
			<description>
				Return true if the array contains given value.
				[codeblock]
				[ "inside", 7 ].has("inside") == true
				[ "inside", 7 ].has("outside") == false
				[ "inside", 7 ].has(7) == true
				[ "inside", 7 ].has("7") == false
				[/codeblock]
			</description>
		</method>
		<method name="hash">
			<return type="int">
			</return>
			<description>
				Return a hashed integer value representing the array contents.
			</description>
		</method>
		<method name="insert">
			<argument index="0" name="position" type="int">
			</argument>
			<argument index="1" name="value" type="Variant">
			</argument>
			<description>
				Insert a new element at a given position in the array. The position must be valid, or at the end of the array (pos==size()).
			</description>
		</method>
		<method name="invert">
			<description>
				Reverse the order of the elements in the array.
			</description>
		</method>
		<method name="pop_back">
			<return type="Variant">
			</return>
			<description>
				Remove the last element of the array.
			</description>
		</method>
		<method name="pop_front">
			<return type="Variant">
			</return>
			<description>
				Remove the first element of the array.
			</description>
		</method>
		<method name="push_back">
			<argument index="0" name="value" type="Variant">
			</argument>
			<description>
				Append an element at the end of the array.
			</description>
		</method>
		<method name="push_front">
			<argument index="0" name="value" type="Variant">
			</argument>
			<description>
				Add an element at the beginning of the array.
			</description>
		</method>
		<method name="remove">
			<argument index="0" name="position" type="int">
			</argument>
			<description>
				Remove an element from the array by index.
			</description>
		</method>
		<method name="resize">
			<argument index="0" name="size" type="int">
			</argument>
			<description>
				Resize the array to contain a different number of elements. If the array size is smaller, elements are cleared, if bigger, new elements are Null.
			</description>
		</method>
		<method name="rfind">
			<return type="int">
			</return>
			<argument index="0" name="what" type="Variant">
			</argument>
			<argument index="1" name="from" type="int" default="-1">
			</argument>
			<description>
				Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array.
			</description>
		</method>
		<method name="size">
			<return type="int">
			</return>
			<description>
				Return the amount of elements in the array.
			</description>
		</method>
		<method name="sort">
			<description>
				Sort the array using natural order.
			</description>
		</method>
		<method name="sort_custom">
			<argument index="0" name="obj" type="Object">
			</argument>
			<argument index="1" name="func" type="String">
			</argument>
			<description>
				Sort the array using a custom method. The arguments are an object that holds the method and the name of such method. The custom method receives two arguments (a pair of elements from the array) and must return true if the first argument is less than the second, and return false otherwise.
				[b]Note:[/b] you cannot randomize the return value as the heapsort algorithm expects a deterministic result. Doing so will result in unexpected behavior.
				[codeblock]
				class MyCustomSorter:
				    static func sort(a, b):
				        if a[0] &lt; b[0]:
				            return true
				        return false

				var my_items = [[5, "Potato"], [9, "Rice"], [4, "Tomato"]]
				my_items.sort_custom(MyCustomSorter, "sort")
				[/codeblock]
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
