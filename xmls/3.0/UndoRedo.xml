<?xml version="1.0" encoding="UTF-8" ?>
<class name="UndoRedo" inherits="Object" category="Core" version="3.0.7">
	<brief_description>
		Helper to manage UndoRedo in the editor or custom tools.
	</brief_description>
	<description>
		Helper to manage UndoRedo in the editor or custom tools. It works by registering methods and property changes inside 'actions'.
		Common behavior is to create an action, then add do/undo calls to functions or property changes, then committing the action.
		Here's an example on how to add an action to Godot editor's own 'undoredo':
		[codeblock]
		var undoredo = get_undo_redo() # method of EditorPlugin

		func do_something():
		    pass # put your code here

		func undo_something():
		    pass # put here the code that reverts what's done by "do_something()"

		func _on_MyButton_pressed():
		    var node = get_node("MyNode2D")
		    undoredo.create_action("Move the node")
		    undoredo.add_do_method(self, "do_something")
		    undoredo.add_undo_method(self, "undo_something")
		    undoredo.add_do_property(node, "position", Vector2(100,100))
		    undoredo.add_undo_property(node, "position", node.position)
		    undoredo.commit_action()
		[/codeblock]
		[method create_action], [method add_do_method], [method add_undo_method], [method add_do_property], [method add_undo_property], and [method commit_action] should be called one after the other, like in the example. Not doing so could lead to crashes.
		If you don't need to register a method you can leave [method add_do_method] and [method add_undo_method] out, and so it goes for properties. You can register more than one method/property.
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="add_do_method" qualifiers="vararg">
			<return type="Variant">
			</return>
			<argument index="0" name="object" type="Object">
			</argument>
			<argument index="1" name="method" type="String">
			</argument>
			<description>
				Register a method that will be called when the action is committed.
			</description>
		</method>
		<method name="add_do_property">
			<return type="void">
			</return>
			<argument index="0" name="object" type="Object">
			</argument>
			<argument index="1" name="property" type="String">
			</argument>
			<argument index="2" name="value" type="Variant">
			</argument>
			<description>
				Register a property value change for 'do'.
			</description>
		</method>
		<method name="add_do_reference">
			<return type="void">
			</return>
			<argument index="0" name="object" type="Object">
			</argument>
			<description>
				Register a reference for 'do' that will be erased if the 'do' history is lost. This is useful mostly for new nodes created for the 'do' call. Do not use for resources.
			</description>
		</method>
		<method name="add_undo_method" qualifiers="vararg">
			<return type="Variant">
			</return>
			<argument index="0" name="object" type="Object">
			</argument>
			<argument index="1" name="method" type="String">
			</argument>
			<description>
				Register a method that will be called when the action is undone.
			</description>
		</method>
		<method name="add_undo_property">
			<return type="void">
			</return>
			<argument index="0" name="object" type="Object">
			</argument>
			<argument index="1" name="property" type="String">
			</argument>
			<argument index="2" name="value" type="Variant">
			</argument>
			<description>
				Register a property value change for 'undo'.
			</description>
		</method>
		<method name="add_undo_reference">
			<return type="void">
			</return>
			<argument index="0" name="object" type="Object">
			</argument>
			<description>
				Register a reference for 'undo' that will be erased if the 'undo' history is lost. This is useful mostly for nodes removed with the 'do' call (not the 'undo' call!).
			</description>
		</method>
		<method name="clear_history">
			<return type="void">
			</return>
			<description>
				Clear the undo/redo history and associated references.
			</description>
		</method>
		<method name="commit_action">
			<return type="void">
			</return>
			<description>
				Commit the action. All 'do' methods/properties are called/set when this function is called.
			</description>
		</method>
		<method name="create_action">
			<return type="void">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="merge_mode" type="int" enum="UndoRedo.MergeMode" default="0">
			</argument>
			<description>
				Create a new action. After this is called, do all your calls to [method add_do_method], [method add_undo_method], [method add_do_property], and [method add_undo_property], then commit the action with [method commit_action].
			</description>
		</method>
		<method name="get_current_action_name" qualifiers="const">
			<return type="String">
			</return>
			<description>
				Get the name of the current action.
			</description>
		</method>
		<method name="get_version" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Get the version, each time a new action is committed, the version number of the UndoRedo is increased automatically.
				This is useful mostly to check if something changed from a saved version.
			</description>
		</method>
		<method name="redo">
			<return type="void">
			</return>
			<description>
				Redo last action.
			</description>
		</method>
		<method name="undo">
			<return type="void">
			</return>
			<description>
				Undo last action.
			</description>
		</method>
	</methods>
	<constants>
		<constant name="MERGE_DISABLE" value="0" enum="MergeMode">
		</constant>
		<constant name="MERGE_ENDS" value="1" enum="MergeMode">
		</constant>
		<constant name="MERGE_ALL" value="2" enum="MergeMode">
		</constant>
	</constants>
</class>
