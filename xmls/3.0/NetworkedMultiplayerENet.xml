<?xml version="1.0" encoding="UTF-8" ?><class name="NetworkedMultiplayerENet" inherits="NetworkedMultiplayerPeer" category="Core" version="3.0.7"><brief_description>
		PacketPeer implementation using the ENet library.</brief_description><description>
		A PacketPeer implementation that should be passed to [method SceneTree.set_network_peer] after being initialized as either a client or server. Events can then be handled by connecting to [SceneTree] signals.</description><tutorials>
		http://docs.godotengine.org/en/3.0/tutorials/networking/high_level_multiplayer.html
		http://enet.bespin.org/usergroup0.html</tutorials><demos></demos><methods><method name="close_connection"><return type="void"></return><description>
				Closes the connection. Ignored if no connection is currently established. If this is a server it tries to notify all clients before forcibly disconnecting them. If this is a client it simply closes the connection to the server.</description></method><method name="create_client"><return type="int" enum="Error"></return><argument index="0" name="ip" type="String"></argument><argument index="1" name="port" type="int"></argument><argument index="2" name="in_bandwidth" type="int" default="0"></argument><argument index="3" name="out_bandwidth" type="int" default="0"></argument><description>
				Create client that connects to a server at address [code]ip[/code] using specified [code]port[/code]. The given IP needs to be in IPv4 or IPv6 address format, for example: [code]192.168.1.1[/code]. The [code]port[/code] is the port the server is listening on. The [code]in_bandwidth[/code] and [code]out_bandwidth[/code] parameters can be used to limit the incoming and outgoing bandwidth to the given number of bytes per second. The default of 0 means unlimited bandwidth. Note that ENet will strategically drop packets on specific sides of a connection between peers to ensure the peer's bandwidth is not overwhelmed. The bandwidth parameters also determine the window size of a connection which limits the amount of reliable packets that may be in transit at any given time. Returns [code]OK[/code] if a client was created, [code]ERR_ALREADY_IN_USE[/code] if this NetworkedMultiplayerEnet instance already has an open connection (in which case you need to call [method close_connection] first) or [code]ERR_CANT_CREATE[/code] if the client could not be created.</description></method><method name="create_server"><return type="int" enum="Error"></return><argument index="0" name="port" type="int"></argument><argument index="1" name="max_clients" type="int" default="32"></argument><argument index="2" name="in_bandwidth" type="int" default="0"></argument><argument index="3" name="out_bandwidth" type="int" default="0"></argument><description>
				Create server that listens to connections via [code]port[/code]. The port needs to be an available, unused port between 0 and 65535. Note that ports below 1024 are privileged and may require elevated permissions depending on the platform. To change the interface the server listens on, use [method set_bind_ip]. The default IP is the wildcard [code]*[/code], which listens on all available interfaces. [code]max_clients[/code] is the maximum number of clients that are allowed at once, any number up to 4096 may be used, although the achievable number of simultaneous clients may be far lower and depends on the application. For additional details on the bandwidth parameters, see [method create_client]. Returns [code]OK[/code] if a server was created, [code]ERR_ALREADY_IN_USE[/code] if this NetworkedMultiplayerEnet instance already has an open connection (in which case you need to call [method close_connection] first) or [code]ERR_CANT_CREATE[/code] if the server could not be created.</description></method><method name="set_bind_ip"><return type="void"></return><argument index="0" name="ip" type="String"></argument><description>
				The IP used when creating a server. This is set to the wildcard [code]*[/code] by default, which binds to all available interfaces. The given IP needs to be in IPv4 or IPv6 address format, for example: [code]192.168.1.1[/code].</description></method></methods><members><member name="compression_mode" type="int" setter="set_compression_mode" getter="get_compression_mode" enum="NetworkedMultiplayerENet.CompressionMode">
			The compression method used for network packets. Default is no compression. These have different tradeoffs of compression speed versus bandwidth, you may need to test which one works best for your use case if you use compression at all.</member></members><constants><constant name="COMPRESS_NONE" value="0" enum="CompressionMode">
			No compression.</constant><constant name="COMPRESS_RANGE_CODER" value="1" enum="CompressionMode">
			ENet's buildin range encoding.</constant><constant name="COMPRESS_FASTLZ" value="2" enum="CompressionMode">
			FastLZ compression.</constant><constant name="COMPRESS_ZLIB" value="3" enum="CompressionMode">
			zlib compression.</constant><constant name="COMPRESS_ZSTD" value="4" enum="CompressionMode">
			ZStandard compression.</constant></constants></class>
