<?xml version="1.0" encoding="UTF-8" ?>
<class name="PhysicsDirectBodyState" inherits="Object" category="Core" version="3.0.7">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="add_force">
			<return type="void">
			</return>
			<argument index="0" name="force" type="Vector3">
			</argument>
			<argument index="1" name="position" type="Vector3">
			</argument>
			<description>
				Adds a constant force (i.e. acceleration).
			</description>
		</method>
		<method name="apply_impulse">
			<return type="void">
			</return>
			<argument index="0" name="position" type="Vector3">
			</argument>
			<argument index="1" name="j" type="Vector3">
			</argument>
			<description>
				Apply a positioned impulse (which will be affected by the body mass and shape). This is the equivalent of hitting a billiard ball with a cue: a force that is applied once, and only once. Both the impulse and the position are in global coordinates, and the position is relative to the object's origin.
			</description>
		</method>
		<method name="apply_torqe_impulse">
			<return type="void">
			</return>
			<argument index="0" name="j" type="Vector3">
			</argument>
			<description>
				This method is deprecated. Please use [method apply_torque_impulse] instead.
			</description>
		</method>
		<method name="apply_torque_impulse">
			<return type="void">
			</return>
			<argument index="0" name="j" type="Vector3">
			</argument>
			<description>
				Apply a torque impulse (which will be affected by the body mass and shape). This will rotate the body around the passed in vector.
			</description>
		</method>
		<method name="get_contact_collider" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_collider_id" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_collider_object" qualifiers="const">
			<return type="Object">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_collider_position" qualifiers="const">
			<return type="Vector3">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_collider_shape" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_collider_velocity_at_position" qualifiers="const">
			<return type="Vector3">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_contact_local_normal" qualifiers="const">
			<return type="Vector3">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_local_position" qualifiers="const">
			<return type="Vector3">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_local_shape" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_space_state">
			<return type="PhysicsDirectSpaceState">
			</return>
			<description>
			</description>
		</method>
		<method name="integrate_forces">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="angular_velocity" type="Vector3" setter="set_angular_velocity" getter="get_angular_velocity">
			The angular velocity of the body.
		</member>
		<member name="center_of_mass" type="Vector3" setter="" getter="get_center_of_mass">
		</member>
		<member name="inverse_inertia" type="Vector3" setter="" getter="get_inverse_inertia">
			The inverse of the inertia of the body.
		</member>
		<member name="inverse_mass" type="float" setter="" getter="get_inverse_mass">
			The inverse of the mass of the body.
		</member>
		<member name="linear_velocity" type="Vector3" setter="set_linear_velocity" getter="get_linear_velocity">
			The linear velocity of the body.
		</member>
		<member name="principal_inertia_axes" type="Basis" setter="" getter="get_principal_inertia_axes">
		</member>
		<member name="sleeping" type="bool" setter="set_sleep_state" getter="is_sleeping">
			[code]true[/code] if this body is currently sleeping (not active).
		</member>
		<member name="step" type="float" setter="" getter="get_step">
			The timestep (delta) used for the simulation.
		</member>
		<member name="total_angular_damp" type="float" setter="" getter="get_total_angular_damp">
			The rate at which the body stops rotating, if there are not any other forces moving it.
		</member>
		<member name="total_gravity" type="Vector3" setter="" getter="get_total_gravity">
			The total gravity vector being currently applied to this body.
		</member>
		<member name="total_linear_damp" type="float" setter="" getter="get_total_linear_damp">
			The rate at which the body stops moving, if there are not any other forces moving it.
		</member>
		<member name="transform" type="Transform" setter="set_transform" getter="get_transform">
			The transformation matrix of the body.
		</member>
	</members>
	<constants>
	</constants>
</class>
