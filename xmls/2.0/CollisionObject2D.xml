<class category="Core" inherits="Node2D" name="CollisionObject2D"><brief_description>
	Base node for 2D collisionables.</brief_description><description>
	CollisionObject2D is the base class for 2D physics collisionables. They can hold any number of 2D collision shapes. Usually, they are edited by placing [CollisionShape2D] and/or [CollisionPolygon2D] nodes as children. Such nodes are for reference and not present outside the editor, so code should use the regular shape API.</description><methods><method name="_input_event" qualifiers="virtual"><argument index="0" name="viewport" type="Object"></argument><argument index="1" name="event" type="InputEvent"></argument><argument index="2" name="shape_idx" type="int"></argument><description>
			This method can be used to override normal input processing. The first parameter is the viewport where the event took place. The second holds the input event received, and the third the shape of this object where it happened.</description></method><method name="add_shape"><argument index="0" name="shape" type="Shape2D"></argument><argument default="1,0, 0,1, 0,0" index="1" name="transform" type="Matrix32"></argument><description>
			Add a [Shape2D] to the collision body, with a given custom transform.</description></method><method name="clear_shapes"><description>
			Remove all shapes.</description></method><method name="get_rid" qualifiers="const"><return type="RID"></return><description>
			Return the RID of this object.</description></method><method name="get_shape" qualifiers="const"><return type="Shape2D"></return><argument index="0" name="shape_idx" type="int"></argument><description>
			Return the shape in the given index.</description></method><method name="get_shape_count" qualifiers="const"><return type="int"></return><description>
			Return the amount of shapes in the collision body. Because a [CollisionPolygon2D] can generate more than one [Shape2D], the amount returned does not have to match the sum of [CollisionShape2D] and [CollisionPolygon2D].</description></method><method name="get_shape_transform" qualifiers="const"><return type="Matrix32"></return><argument index="0" name="shape_idx" type="int"></argument><description>
			Return the shape transform in the given index.</description></method><method name="is_pickable" qualifiers="const"><return type="bool"></return><description>
			Return whether this object is pickable.</description></method><method name="is_shape_set_as_trigger" qualifiers="const"><return type="bool"></return><argument index="0" name="shape_idx" type="int"></argument><description>
			Return whether a shape is a trigger. A trigger shape detects collisions, but is otherwise unaffected by physics (i.e. colliding objects will not get blocked).</description></method><method name="remove_shape"><argument index="0" name="shape_idx" type="int"></argument><description>
			Remove the shape in the given index.</description></method><method name="set_pickable"><argument index="0" name="enabled" type="bool"></argument><description>
			Set whether this object is pickable. A pickable object can detect the mouse pointer enter/leave it and, if the mouse is inside it, report input events.</description></method><method name="set_shape"><argument index="0" name="shape_idx" type="int"></argument><argument index="1" name="shape" type="Shape"></argument><description>
			Change a shape in the collision body.</description></method><method name="set_shape_as_trigger"><argument index="0" name="shape_idx" type="int"></argument><argument index="1" name="enable" type="bool"></argument><description>
			Set whether a shape is a trigger. A trigger shape detects collisions, but is otherwise unaffected by physics (i.e. colliding objects will not get blocked).</description></method><method name="set_shape_transform"><argument index="0" name="shape_idx" type="int"></argument><argument index="1" name="transform" type="Matrix32"></argument><description>
			Change the shape transform in the collision body.</description></method></methods><signals><signal name="input_event"><argument index="0" name="viewport" type="Object"></argument><argument index="1" name="event" type="InputEvent"></argument><argument index="2" name="shape_idx" type="int"></argument><description>
			This signal triggers when an input event fires over a shape. The first parameter is the viewport where the event took place. The second holds the input event received, and the third the shape of this object where it happened.</description></signal><signal name="mouse_enter"><description>
			This event fires only once when the mouse pointer enters any shape of this object.</description></signal><signal name="mouse_exit"><description>
			This event fires only once when the mouse pointer exits all shapes of this object.</description></signal></signals><constants></constants></class>