<class category="Core" inherits="Node" name="SamplePlayer"><brief_description>
	Sample Player node.</brief_description><description>
	SamplePlayer is a [Node] meant for simple sample playback. A library of samples is loaded and played back "as is", without positioning or anything.</description><methods><method name="get_chorus" qualifiers="const"><return type="float"></return><argument index="0" name="voice" type="int"></argument><description>
			Return the current chorus send level for a given voice.</description></method><method name="get_default_chorus" qualifiers="const"><return type="float"></return><description>
			Return the default chorus send level of the player.</description></method><method name="get_default_filter_cutoff" qualifiers="const"><return type="float"></return><description>
			Return the default filter cutoff frequency of the player.</description></method><method name="get_default_filter_gain" qualifiers="const"><return type="float"></return><description>
			Return the default filter gain of the player.</description></method><method name="get_default_filter_resonance" qualifiers="const"><return type="float"></return><description>
			Return the default filter resonance of the player.</description></method><method name="get_default_filter_type" qualifiers="const"><return type="int"></return><description>
			Return the default filter type in use (see FILTER_* constants) for the player.</description></method><method name="get_default_pan" qualifiers="const"><return type="float"></return><description>
			Return the default panning of the player.</description></method><method name="get_default_pan_depth" qualifiers="const"><return type="float"></return><description>
			Return the default pan depth of the player.</description></method><method name="get_default_pan_height" qualifiers="const"><return type="float"></return><description>
			Return the default pan height of the player.</description></method><method name="get_default_pitch_scale" qualifiers="const"><return type="float"></return><description>
			Return the default pitch scale of the player.</description></method><method name="get_default_reverb" qualifiers="const"><return type="float"></return><description>
			Return the default reverberation send level of the player.</description></method><method name="get_default_reverb_room" qualifiers="const"><return type="int"></return><description>
			Return the default reverberation room type of the player (see REVERB_* enum).</description></method><method name="get_default_volume" qualifiers="const"><return type="float"></return><description>
			Return the default volume (on a linear scale) of the player.</description></method><method name="get_default_volume_db" qualifiers="const"><return type="float"></return><description>
			Return the default volume (in dB) of the player.</description></method><method name="get_filter_cutoff" qualifiers="const"><return type="float"></return><argument index="0" name="voice" type="int"></argument><description>
			Return the current filter cutoff frequency for a given voice.</description></method><method name="get_filter_gain" qualifiers="const"><return type="float"></return><argument index="0" name="voice" type="int"></argument><description>
			Return the current filter gain for a given voice.</description></method><method name="get_filter_resonance" qualifiers="const"><return type="float"></return><argument index="0" name="voice" type="int"></argument><description>
			Return the current filter resonance for a given voice.</description></method><method name="get_filter_type" qualifiers="const"><return type="int"></return><argument index="0" name="voice" type="int"></argument><description>
			Return the current filter type in use (see FILTER_* constants) for a given voice.</description></method><method name="get_mix_rate" qualifiers="const"><return type="int"></return><argument index="0" name="voice" type="int"></argument><description>
			Return the current mix rate for a given voice.</description></method><method name="get_pan" qualifiers="const"><return type="float"></return><argument index="0" name="voice" type="int"></argument><description>
			Return the current panning for a given voice.</description></method><method name="get_pan_depth" qualifiers="const"><return type="float"></return><argument index="0" name="voice" type="int"></argument><description>
			Return the current pan depth for a given voice.</description></method><method name="get_pan_height" qualifiers="const"><return type="float"></return><argument index="0" name="voice" type="int"></argument><description>
			Return the current pan height for a given voice.</description></method><method name="get_pitch_scale" qualifiers="const"><return type="float"></return><argument index="0" name="voice" type="int"></argument><description>
			Return the current pitch scale for a given voice.</description></method><method name="get_polyphony" qualifiers="const"><return type="int"></return><description>
			Return the polyphony of the player.</description></method><method name="get_reverb" qualifiers="const"><return type="float"></return><argument index="0" name="voice" type="int"></argument><description>
			Return the current reverberation send level for a given voice.</description></method><method name="get_reverb_room" qualifiers="const"><return type="int"></return><argument index="0" name="voice" type="int"></argument><description>
			Return the current reverberation room type for a given voice (see REVERB_* enum).</description></method><method name="get_sample_library" qualifiers="const"><return type="SampleLibrary"></return><description>
			Return the sample library used by the player.</description></method><method name="get_volume" qualifiers="const"><return type="float"></return><argument index="0" name="voice" type="int"></argument><description>
			Return the current volume (on a linear scale) for a given voice.</description></method><method name="get_volume_db" qualifiers="const"><return type="float"></return><argument index="0" name="voice" type="int"></argument><description>
			Return the current volume (in dB) for a given voice.</description></method><method name="is_active" qualifiers="const"><return type="bool"></return><description>
			Return whether the player is currently active.</description></method><method name="is_voice_active" qualifiers="const"><return type="bool"></return><argument index="0" name="voice" type="int"></argument><description>
			Return whether the given voice is currently active.</description></method><method name="play"><return type="int"></return><argument index="0" name="name" type="String"></argument><argument default="false" index="1" name="unique" type="bool"></argument><description>
			Play a sample referenced by its name.
			Optionally, the playback can be made "unique" to force stopping all other samples currently played. The voices allocated for playback will then be returned.</description></method><method name="set_chorus"><argument index="0" name="voice" type="int"></argument><argument index="1" name="send" type="float"></argument><description>
			Set the chorus send level of a voice (from 0 to 1.0). For setting chorus parameters, see [AudioServer].</description></method><method name="set_default_chorus"><argument index="0" name="send" type="float"></argument><description>
			Set the default chorus send level of the player (from 0 to 1.0). For setting chorus parameters, see [AudioServer].</description></method><method name="set_default_filter"><argument index="0" name="type" type="int"></argument><argument index="1" name="cutoff_hz" type="float"></argument><argument index="2" name="resonance" type="float"></argument><argument default="0" index="3" name="gain" type="float"></argument><description>
			Set the default filter for the player, using the given type (see FILTER_* constants), cutoff frequency (from 20 to 16,384 Hz) and resonance (from 0 to 4.0).
			Optionally, a gain can also be given (from 0 to 2.0).</description></method><method name="set_default_pan"><argument index="0" name="pan" type="float"></argument><argument default="0" index="1" name="depth" type="float"></argument><argument default="0" index="2" name="height" type="float"></argument><description>
			Set the default panning of the player. Panning goes from -1.0 (left) to +1.0 (right).
			Optionally, for hardware than support 3D sound, one can also set depth and height (also in range -1.0 to +1.0).</description></method><method name="set_default_pitch_scale"><argument index="0" name="ratio" type="float"></argument><description>
			Set the default pitch scale of the player. A ratio of 1.0 is the normal scale.</description></method><method name="set_default_reverb"><argument index="0" name="room_type" type="int"></argument><argument index="1" name="send" type="float"></argument><description>
			Set the default reverberation type (see REVERB_* constants) and send level (from 0 to 1.0) of the player.</description></method><method name="set_default_volume"><argument index="0" name="volume" type="float"></argument><description>
			Set the default volume of the player using a linear scale.
			The "volume" argument should be a positive factor ranging from 0.0 (mute) up to 16.0 (i.e. 24 dB).
			A factor of 1.0 means that the voice will be played at normal system volume. Factors above 1.0 might be limited by the platform's audio output.</description></method><method name="set_default_volume_db"><argument index="0" name="db" type="float"></argument><description>
			Set the default volume of the player in dB.
			The "dB" argument can range from -80 to 24 dB, 0 dB being the maximum volume. Every 6 dB (resp. -6 dB), the volume is increased (resp. reduced) by half.</description></method><method name="set_filter"><argument index="0" name="voice" type="int"></argument><argument index="1" name="type" type="int"></argument><argument index="2" name="cutoff_hz" type="float"></argument><argument index="3" name="resonance" type="float"></argument><argument default="0" index="4" name="gain" type="float"></argument><description>
			Set the filter for a given voice, using the given type (see FILTER_* constants), cutoff frequency (from 20 to 16,384 Hz) and resonance (from 0 to 4.0).
			Optionally, a gain can also be given (from 0 to 2.0).</description></method><method name="set_mix_rate"><argument index="0" name="voice" type="int"></argument><argument index="1" name="hz" type="int"></argument><description>
			Set the mix rate (in Hz) of a given voice.</description></method><method name="set_pan"><argument index="0" name="voice" type="int"></argument><argument index="1" name="pan" type="float"></argument><argument default="0" index="2" name="depth" type="float"></argument><argument default="0" index="3" name="height" type="float"></argument><description>
			Set the panning of a voice. Panning goes from -1.0 (left) to +1.0 (right).
			Optionally, for hardware than support 3D sound, one can also set depth and height (also in range -1.0 to +1.0).</description></method><method name="set_pitch_scale"><argument index="0" name="voice" type="int"></argument><argument index="1" name="ratio" type="float"></argument><description>
			Set the pitch scale of a given voice. A ratio of 1.0 is the normal scale.</description></method><method name="set_polyphony"><argument index="0" name="max_voices" type="int"></argument><description>
			Set the polyphony of the player (maximum amount of simultaneous voices).</description></method><method name="set_reverb"><argument index="0" name="voice" type="int"></argument><argument index="1" name="room_type" type="int"></argument><argument index="2" name="send" type="float"></argument><description>
			Set the reverberation type (see REVERB_* constants) and send level (from 0 to 1.0) of a voice.</description></method><method name="set_sample_library"><argument index="0" name="library" type="SampleLibrary"></argument><description>
			Set the sample library for the player.</description></method><method name="set_volume"><argument index="0" name="voice" type="int"></argument><argument index="1" name="volume" type="float"></argument><description>
			Set the volume of a given voice using a linear scale.
			The "volume" argument should be a positive factor ranging from 0.0 (mute) up to 16.0 (i.e. 24 dB).
			A factor of 1.0 means that the voice will be played at normal system volume. Factors above 1.0 might be limited by the platform's audio output.</description></method><method name="set_volume_db"><argument index="0" name="voice" type="int"></argument><argument index="1" name="db" type="float"></argument><description>
			Set the volume of a given voice in dB.
			The "dB" argument can range from -80 to 24 dB, 0 dB being the maximum volume. Every 6 dB (resp. -6 dB), the volume is increased (resp. reduced) by half.</description></method><method name="stop"><argument index="0" name="voice" type="int"></argument><description>
			Stop a given voice.</description></method><method name="stop_all"><description>
			Stop all playing voices.</description></method></methods><constants><constant name="FILTER_NONE" value="0">
			Filter is disabled for voice.</constant><constant name="FILTER_LOWPASS" value="1">
			Low-pass filter is used for voice.</constant><constant name="FILTER_BANDPASS" value="2">
			Band-pass filter is used for voice.</constant><constant name="FILTER_HIPASS" value="3">
			High-pass filter is used for voice.</constant><constant name="FILTER_NOTCH" value="4">
			Notch (band reject) filter is used for voice.</constant><constant name="FILTER_PEAK" value="5">
			Peak (exclusive band) filter is used for voice.</constant><constant name="FILTER_BANDLIMIT" value="6">
			Band-limit filter is used for voice, in this case resonance is the high-pass cutoff. A band-limit filter has a different frequency response than a notch filter, but otherwise both are band-rejecting filters.</constant><constant name="FILTER_LOW_SHELF" value="7">
			Low-shelf filter is used for voice.</constant><constant name="FILTER_HIGH_SHELF" value="8">
			High-shelf filter is used for voice.</constant><constant name="REVERB_SMALL" value="0">
			Small reverberation room (house room).</constant><constant name="REVERB_MEDIUM" value="1">
			Medium reverberation room (street)</constant><constant name="REVERB_LARGE" value="2">
			Large reverberation room (theatre)</constant><constant name="REVERB_HALL" value="3">
			Huge reverberation room (cathedral, warehouse).</constant><constant name="INVALID_VOICE_ID" value="-1">
			Value returned if the voice ID is invalid.</constant></constants></class>