<class name="CanvasItem" inherits="Node" category="Core"><brief_description>
	Base class of anything 2D.</brief_description><description>
	Base class of anything 2D. Canvas items are laid out in a tree and children inherit and extend the transform of their parent. CanvasItem is extended by [Control], for anything GUI related, and by [Node2D] for anything 2D engine related.
	Any CanvasItem can draw. For this, the "update" function must be called, then NOTIFICATION_DRAW will be received on idle time to request redraw. Because of this, canvas items don't need to be redraw on every frame, improving the performance significantly. Several functions for drawing on the CanvasItem are provided (see draw_* functions). They can only be used inside the notification, signal or _draw() overrides function, though.
	Canvas items are draw in tree order. By default, children are on top of their parents so a root CanvasItem will be drawn behind everything (this can be changed per item though).
	Canvas items can also be hidden (hiding also their subtree). They provide many means for changing standard parameters such as opacity (for it and the subtree) and self opacity, blend mode.
	Ultimately, a transform notification can be requested, which will notify the node that its global position changed in case the parent tree changed.</description><methods><method name="_draw" qualifiers="virtual"><description>
			Called (if exists) to draw the canvas item.</description></method><method name="draw_char"><return type="float"></return><argument index="0" name="font" type="Font"></argument><argument index="1" name="pos" type="Vector2"></argument><argument index="2" name="char" type="String"></argument><argument index="3" name="next" type="String"></argument><argument index="4" name="modulate" type="Color" default="Color(1,1,1,1)"></argument><description>
			Draw a string character using a custom font. Returns the advance, depending on the char width and kerning with an optional next char.</description></method><method name="draw_circle"><argument index="0" name="pos" type="Vector2"></argument><argument index="1" name="radius" type="float"></argument><argument index="2" name="color" type="Color"></argument><description>
			Draw a colored circle.</description></method><method name="draw_colored_polygon"><argument index="0" name="points" type="Vector2Array"></argument><argument index="1" name="color" type="Color"></argument><argument index="2" name="uvs" type="Vector2Array" default="Vector2Array([])"></argument><argument index="3" name="texture" type="Texture" default="NULL"></argument><description>
			Draw a colored polygon of any amount of points, convex or concave.</description></method><method name="draw_line"><argument index="0" name="from" type="Vector2"></argument><argument index="1" name="to" type="Vector2"></argument><argument index="2" name="color" type="Color"></argument><argument index="3" name="width" type="float" default="1"></argument><description>
			Draw a line from a 2D point to another, with a given color and width.</description></method><method name="draw_polygon"><argument index="0" name="points" type="Vector2Array"></argument><argument index="1" name="colors" type="ColorArray"></argument><argument index="2" name="uvs" type="Vector2Array" default="Vector2Array([])"></argument><argument index="3" name="texture" type="Texture" default="NULL"></argument><description>
			Draw a polygon of any amount of points, convex or concave.</description></method><method name="draw_primitive"><argument index="0" name="points" type="Vector2Array"></argument><argument index="1" name="colors" type="ColorArray"></argument><argument index="2" name="uvs" type="Vector2Array"></argument><argument index="3" name="texture" type="Texture" default="NULL"></argument><argument index="4" name="width" type="float" default="1"></argument><description>
			Draw a custom primitive, 1 point for a point, 2 points for a line, 3 points for a triangle and 4 points for a quad.</description></method><method name="draw_rect"><argument index="0" name="rect" type="Rect2"></argument><argument index="1" name="color" type="Color"></argument><description>
			Draw a colored rectangle.</description></method><method name="draw_set_transform"><argument index="0" name="pos" type="Vector2"></argument><argument index="1" name="rot" type="float"></argument><argument index="2" name="scale" type="Vector2"></argument><description>
			Set a custom transform for drawing. Anything drawn afterwards will be transformed by this.</description></method><method name="draw_string"><argument index="0" name="font" type="Font"></argument><argument index="1" name="pos" type="Vector2"></argument><argument index="2" name="text" type="String"></argument><argument index="3" name="modulate" type="Color" default="Color(1,1,1,1)"></argument><argument index="4" name="clip_w" type="int" default="-1"></argument><description>
			Draw a string using a custom font.</description></method><method name="draw_style_box"><argument index="0" name="style_box" type="StyleBox"></argument><argument index="1" name="rect" type="Rect2"></argument><description>
			Draw a styled rectangle.</description></method><method name="draw_texture"><argument index="0" name="texture" type="Texture"></argument><argument index="1" name="pos" type="Vector2"></argument><argument index="2" name="modulate" type="Color" default="Color(1,1,1,1)"></argument><description>
			Draw a texture at a given position.</description></method><method name="draw_texture_rect"><argument index="0" name="texture" type="Texture"></argument><argument index="1" name="rect" type="Rect2"></argument><argument index="2" name="tile" type="bool"></argument><argument index="3" name="modulate" type="Color" default="Color(1,1,1,1)"></argument><argument index="4" name="transpose" type="bool" default="false"></argument><description>
			Draw a textured rectangle at a given position, optionally modulated by a color. Transpose swaps the x and y coordinates when reading the texture.</description></method><method name="draw_texture_rect_region"><argument index="0" name="texture" type="Texture"></argument><argument index="1" name="rect" type="Rect2"></argument><argument index="2" name="src_rect" type="Rect2"></argument><argument index="3" name="modulate" type="Color" default="Color(1,1,1,1)"></argument><argument index="4" name="transpose" type="bool" default="false"></argument><description>
			Draw a textured rectangle region at a given position, optionally modulated by a color. Transpose swaps the x and y coordinates when reading the texture.</description></method><method name="edit_get_state" qualifiers="const"><return type="Variant"></return><description>
			Used for editing, returns an opaque value representing the transform state.</description></method><method name="edit_rotate"><argument index="0" name="degrees" type="float"></argument><description>
			Used for editing, handle rotation.</description></method><method name="edit_set_rect"><argument index="0" name="rect" type="Rect2"></argument><description></description></method><method name="edit_set_state"><argument index="0" name="state" type="var"></argument><description>
			Set the transform state of this CanvasItem. For [Node2D], this is an [Array] with (in order) a [Vector2] for position, a float for rotation and another [Vector2] for scale. For [Control] this is a [Rect2] with the position and size.</description></method><method name="get_blend_mode" qualifiers="const"><return type="int"></return><description>
			Return the current blending mode from enum BLEND_MODE_*.</description></method><method name="get_canvas" qualifiers="const"><return type="RID"></return><description>
			Return the [RID] of the [World2D] canvas where this item is in.</description></method><method name="get_canvas_item" qualifiers="const"><return type="RID"></return><description>
			Return the canvas item RID used by [VisualServer] for this item.</description></method><method name="get_canvas_transform" qualifiers="const"><return type="Matrix32"></return><description>
			Get the transform matrix of this item's canvas.</description></method><method name="get_global_mouse_pos" qualifiers="const"><return type="Vector2"></return><description>
			Get the global position of the mouse.</description></method><method name="get_global_transform" qualifiers="const"><return type="Matrix32"></return><description>
			Get the global transform matrix of this item.</description></method><method name="get_global_transform_with_canvas" qualifiers="const"><return type="Matrix32"></return><description>
			Get the global transform matrix of this item in relation to the canvas.</description></method><method name="get_item_rect" qualifiers="const"><return type="Rect2"></return><description>
			Return a rect containing the editable boundaries of the item.</description></method><method name="get_light_mask" qualifiers="const"><return type="int"></return><description>
			Get this item's light mask number.</description></method><method name="get_local_mouse_pos" qualifiers="const"><return type="Vector2"></return><description>
			Get the mouse position relative to this item's position.</description></method><method name="get_material" qualifiers="const"><return type="CanvasItemMaterial"></return><description>
			Get the material of this item.</description></method><method name="get_opacity" qualifiers="const"><return type="float"></return><description>
			Return the canvas item opacity. This affects the canvas item and all the children.</description></method><method name="get_self_opacity" qualifiers="const"><return type="float"></return><description>
			Return the canvas item self-opacity.</description></method><method name="get_transform" qualifiers="const"><return type="Matrix32"></return><description>
			Get the transform matrix of this item.</description></method><method name="get_use_parent_material" qualifiers="const"><return type="bool"></return><description>
			Get whether this item uses its parent's material.</description></method><method name="get_viewport_rect" qualifiers="const"><return type="Rect2"></return><description>
			Get the viewport's boundaries as a [Rect2].</description></method><method name="get_viewport_transform" qualifiers="const"><return type="Matrix32"></return><description>
			Get this item's transform in relation to the viewport.</description></method><method name="get_world_2d" qualifiers="const"><return type="Object"></return><description>
			Get the [World2D] where this item is in.</description></method><method name="hide"><description>
			Hide the CanvasItem currently visible.</description></method><method name="is_draw_behind_parent_enabled" qualifiers="const"><return type="bool"></return><description>
			Return whether the item is drawn behind its parent.</description></method><method name="is_hidden" qualifiers="const"><return type="bool"></return><description>
			Return true if this CanvasItem is hidden. Note that the CanvasItem may not be visible, but as long as it's not hidden ([method hide] called) the function will return false.</description></method><method name="is_set_as_toplevel" qualifiers="const"><return type="bool"></return><description>
			Return if set as toplevel. See [method set_as_toplevel].</description></method><method name="is_visible" qualifiers="const"><return type="bool"></return><description>
			Return true if this CanvasItem is visible. It may be invisible because itself or a parent canvas item is hidden.</description></method><method name="make_input_local" qualifiers="const"><return type="InputEvent"></return><argument index="0" name="event" type="InputEvent"></argument><description>
			Takes a global input event and convert to this item's coordinate system.</description></method><method name="set_as_toplevel"><argument index="0" name="enable" type="bool"></argument><description>
			Set as top level. This means that it will not inherit transform from parent canvas items.</description></method><method name="set_blend_mode"><argument index="0" name="blend_mode" type="int"></argument><description>
			Set the blending mode from enum BLEND_MODE_*.</description></method><method name="set_draw_behind_parent"><argument index="0" name="enable" type="bool"></argument><description>
			Set whether the canvas item is drawn behind its parent.</description></method><method name="set_hidden"><argument index="0" name="hidden" type="bool"></argument><description>
			Set whether this item should be hidden or not. Note that no matter what is set here this item won't be shown if its parent or grandparents nodes are also hidden. A hidden CanvasItem make all children hidden too.</description></method><method name="set_light_mask"><argument index="0" name="light_mask" type="int"></argument><description>
			Set the ligtht mask number of this item.</description></method><method name="set_material"><argument index="0" name="material" type="CanvasItemMaterial"></argument><description>
			Set the material of this item.</description></method><method name="set_opacity"><argument index="0" name="opacity" type="float"></argument><description>
			Set canvas item opacity. This will affect the canvas item and all the children.</description></method><method name="set_self_opacity"><argument index="0" name="self_opacity" type="float"></argument><description>
			Set canvas item self-opacity. This does not affect the opacity of children items.</description></method><method name="set_use_parent_material"><argument index="0" name="enable" type="bool"></argument><description>
			Set whether or not this item should use its parent's material.</description></method><method name="show"><description>
			Show the CanvasItem currently hidden.</description></method><method name="update"><description>
			Queue the CanvasItem for update. [code]NOTIFICATION_DRAW[/code] will be called on idle time to request redraw.</description></method></methods><signals><signal name="draw"><description>
			Emitted when the CanvasItem must redraw. This can only be connected realtime, as deferred will not allow drawing.</description></signal><signal name="hide"><description>
			Emitted when becoming hidden.</description></signal><signal name="item_rect_changed"><description>
			Emitted when the item rect has changed.</description></signal><signal name="visibility_changed"><description>
			Emitted when the visibility (hidden/visible) changes.</description></signal></signals><constants><constant name="BLEND_MODE_MIX" value="0">
			Mix blending mode. Colors are assumed to be independent of the alpha (opacity) value.</constant><constant name="BLEND_MODE_ADD" value="1">
			Additive blending mode.</constant><constant name="BLEND_MODE_SUB" value="2">
			Subtractive blending mode.</constant><constant name="BLEND_MODE_MUL" value="3">
			Multiplicative blending mode.</constant><constant name="BLEND_MODE_PREMULT_ALPHA" value="4">
			Mix blending mode. Colors are assumed to be premultiplied by the alpha (opacity) value.</constant><constant name="NOTIFICATION_DRAW" value="30">
			CanvasItem is requested to draw.</constant><constant name="NOTIFICATION_VISIBILITY_CHANGED" value="31">
			Canvas item visibility has changed.</constant><constant name="NOTIFICATION_ENTER_CANVAS" value="32">
			Canvas item has entered the canvas.</constant><constant name="NOTIFICATION_EXIT_CANVAS" value="33">
			Canvas item has exited the canvas.</constant><constant name="NOTIFICATION_TRANSFORM_CHANGED" value="29">
			Canvas item transform has changed. Only received if requested.</constant></constants></class>