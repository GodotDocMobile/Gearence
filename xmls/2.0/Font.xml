<class category="Core" inherits="Resource" name="Font"><brief_description>
	Internationalized font and text drawing support.</brief_description><description>
	Font contains an unicode compatible character set, as well as the ability to draw it with variable width, ascent, descent and kerning. For creating fonts from TTF files (or other font formats), see the editor support for fonts. TODO check wikipedia for graph of ascent/baseline/descent/height/etc.</description><methods><method name="add_char"><argument index="0" name="character" type="int"></argument><argument index="1" name="texture" type="int"></argument><argument index="2" name="rect" type="Rect2"></argument><argument default="Vector2(0,0)" index="3" name="align" type="Vector2"></argument><argument default="-1" index="4" name="advance" type="float"></argument><description>
			Add a character to the font, where "character" is the unicode value, "texture" is the texture index, "rect" is the region in the texture (in pixels!), "align" is the (optional) alignment for the character and "advance" is the (optional) advance.</description></method><method name="add_kerning_pair"><argument index="0" name="char_a" type="int"></argument><argument index="1" name="char_b" type="int"></argument><argument index="2" name="kerning" type="int"></argument><description>
			Add a kerning pair to the [Font] as a difference. Kerning pairs are special cases where a typeface advance is determined by the next character.</description></method><method name="add_texture"><argument index="0" name="texture" type="Texture"></argument><description>
			Add a texture to the [Font].</description></method><method name="clear"><description>
			Clear all the font data.</description></method><method name="create_from_fnt"><return type="int"></return><argument index="0" name="path" type="String"></argument><description></description></method><method name="draw" qualifiers="const"><argument index="0" name="canvas_item" type="RID"></argument><argument index="1" name="pos" type="Vector2"></argument><argument index="2" name="string" type="String"></argument><argument default="Color(1,1,1,1)" index="3" name="modulate" type="Color"></argument><argument default="-1" index="4" name="clip_w" type="int"></argument><description>
			Draw "string" into a canvas item using the font at a given "pos" position, with "modulate" color, and optionally clipping the width. "pos" specifies the baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis.</description></method><method name="draw_char" qualifiers="const"><return type="float"></return><argument index="0" name="canvas_item" type="RID"></argument><argument index="1" name="pos" type="Vector2"></argument><argument index="2" name="char" type="int"></argument><argument default="-1" index="3" name="next" type="int"></argument><argument default="Color(1,1,1,1)" index="4" name="modulate" type="Color"></argument><description>
			Draw character "char" into a canvas item using the font at a given "pos" position, with "modulate" color, and optionally kerning if "next" is passed. clipping the width. "pos" specifies the baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis. The width used by the character is returned, making this function useful for drawing strings character by character.</description></method><method name="get_ascent" qualifiers="const"><return type="float"></return><description>
			Return the font ascent (number of pixels above the baseline).</description></method><method name="get_char_size" qualifiers="const"><return type="Vector2"></return><argument index="0" name="char" type="int"></argument><argument default="0" index="1" name="next" type="int"></argument><description>
			Return the size of a character, optionally taking kerning into account if the next character is provided.</description></method><method name="get_descent" qualifiers="const"><return type="float"></return><description>
			Return the font descent (number of pixels below the baseline).</description></method><method name="get_fallback" qualifiers="const"><return type="Object"></return><description></description></method><method name="get_height" qualifiers="const"><return type="float"></return><description>
			Return the total font height (ascent plus descent) in pixels.</description></method><method name="get_kerning_pair" qualifiers="const"><return type="int"></return><argument index="0" name="char_a" type="int"></argument><argument index="1" name="char_b" type="int"></argument><description>
			Return a kerning pair as a difference. Kerning pairs are special cases where a typeface advance is determined by the next character.</description></method><method name="get_string_size" qualifiers="const"><return type="Vector2"></return><argument index="0" name="string" type="String"></argument><description>
			Return the size of a string, taking kerning and advance into account.</description></method><method name="get_texture" qualifiers="const"><return type="Texture"></return><argument index="0" name="idx" type="int"></argument><description></description></method><method name="get_texture_count" qualifiers="const"><return type="int"></return><description></description></method><method name="is_distance_field_hint" qualifiers="const"><return type="bool"></return><description></description></method><method name="set_ascent"><argument index="0" name="px" type="float"></argument><description>
			Set the font ascent (number of pixels above the baseline).</description></method><method name="set_distance_field_hint"><argument index="0" name="enable" type="bool"></argument><description></description></method><method name="set_fallback"><argument index="0" name="fallback" type="Object"></argument><description></description></method><method name="set_height"><argument index="0" name="px" type="float"></argument><description>
			Set the total font height (ascent plus descent) in pixels.</description></method></methods><constants></constants></class>