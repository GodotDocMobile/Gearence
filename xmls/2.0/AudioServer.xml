<class name="AudioServer" inherits="Object" category="Core"><brief_description>
	Server interface for low level audio access.</brief_description><description>
	AudioServer is a low level server interface for audio access. It is in charge of creating sample data (playable audio) as well as its playback via a voice interface.</description><methods><method name="free_rid"><argument index="0" name="rid" type="RID"></argument><description>
			Free a [RID] resource.</description></method><method name="get_event_voice_global_volume_scale" qualifiers="const"><return type="float"></return><description>
			Return the global scale for event-based stream playback.</description></method><method name="get_fx_global_volume_scale" qualifiers="const"><return type="float"></return><description>
			Return the global scale for all voices.</description></method><method name="get_stream_global_volume_scale" qualifiers="const"><return type="float"></return><description>
			Return the global scale for stream playback.</description></method><method name="sample_create"><return type="RID"></return><argument index="0" name="format" type="int"></argument><argument index="1" name="stereo" type="bool"></argument><argument index="2" name="length" type="int"></argument><description>
			Create an audio sample, return a [RID] referencing it. The sample will be created with a given format (from the SAMPLE_FORMAT_* enum), a total length (in samples, not bytes), in either stereo or mono.
			Even if a stereo sample consists of a left sample and a right sample, it still counts as one sample for length purposes.</description></method><method name="sample_get_data" qualifiers="const"><return type="RawArray"></return><argument index="0" name="sample" type="RID"></argument><description>
			Return the sample data as an array of bytes. The length will be the expected length in bytes.</description></method><method name="sample_get_description" qualifiers="const"><return type="String"></return><argument index="0" name="sample" type="RID"></argument><description>
			Return the description of an audio sample. Mainly used for organization.</description></method><method name="sample_get_format" qualifiers="const"><return type="int"></return><argument index="0" name="sample" type="RID"></argument><description>
			Return the format of the audio sample, in the form of the SAMPLE_FORMAT_* enum.</description></method><method name="sample_get_length" qualifiers="const"><return type="int"></return><argument index="0" name="sample" type="RID"></argument><description>
			Return the length in samples (not bytes) of the audio sample. Even if a stereo sample consists of a left sample and a right sample, it still counts as one sample for length purposes.</description></method><method name="sample_get_loop_begin" qualifiers="const"><return type="int"></return><argument index="0" name="sample" type="RID"></argument><description>
			Return the initial loop point of a sample. Only has effect if sample loop is enabled. See [method sample_set_loop_format].</description></method><method name="sample_get_loop_end" qualifiers="const"><return type="int"></return><argument index="0" name="sample" type="RID"></argument><description>
			Return the final loop point of a sample. Only has effect if sample loop is enabled. See [method sample_set_loop_format].</description></method><method name="sample_get_loop_format" qualifiers="const"><return type="int"></return><argument index="0" name="sample" type="RID"></argument><description>
			Return the loop format for a sample, as a value from the SAMPLE_LOOP_* enum.</description></method><method name="sample_get_mix_rate" qualifiers="const"><return type="int"></return><argument index="0" name="sample" type="RID"></argument><description>
			Return the mix rate of the given sample.</description></method><method name="sample_is_stereo" qualifiers="const"><return type="bool"></return><argument index="0" name="sample" type="RID"></argument><description>
			Return whether the sample is stereo (2 channels).</description></method><method name="sample_set_data"><argument index="0" name="sample" type="RID"></argument><argument index="1" name="data" type="RawArray"></argument><description>
			Set the sample data for a given sample as an array of bytes. The length must be equal to the sample length expected in bytes or an error will be produced. The byte length can be calculated as follows:
			Get the sample length ([method sample_get_length]).
			If the sample format is SAMPLE_FORMAT_PCM16, multiply it by 2.
			If the sample format is SAMPLE_FORMAT_IMA_ADPCM, divide it by 2 (rounding any fraction up), then add 4.
			If the sample is stereo ([method sample_is_stereo]), multiply it by 2.</description></method><method name="sample_set_description"><argument index="0" name="sample" type="RID"></argument><argument index="1" name="description" type="String"></argument><description>
			Set the description of an audio sample. Mainly used for organization.</description></method><method name="sample_set_loop_begin"><argument index="0" name="sample" type="RID"></argument><argument index="1" name="pos" type="int"></argument><description>
			Set the initial loop point of a sample. Only has effect if sample loop is enabled. See [method sample_set_loop_format].</description></method><method name="sample_set_loop_end"><argument index="0" name="sample" type="RID"></argument><argument index="1" name="pos" type="int"></argument><description>
			Set the final loop point of a sample. Only has effect if sample loop is enabled. See [method sample_set_loop_format].</description></method><method name="sample_set_loop_format"><argument index="0" name="sample" type="RID"></argument><argument index="1" name="loop_format" type="int"></argument><description>
			Set the loop format for a sample from the SAMPLE_LOOP_* enum. As a warning, Ping Pong loops may not be available on some hardware-mixing platforms.</description></method><method name="sample_set_mix_rate"><argument index="0" name="sample" type="RID"></argument><argument index="1" name="mix_rate" type="int"></argument><description>
			Change the default mix rate of a given sample.</description></method><method name="sample_set_signed_data"><argument index="0" name="sample" type="RID"></argument><argument index="1" name="data" type="RealArray"></argument><description>
			Set the sample data for a given sample as an array of floats. The length must be equal to the sample length or an error will be produced.
			For this method, a stereo sample is made from two samples. Thus, in case of a stereo sample, the array length must be twice the length returned by [method sample_get_length].
			Trying to alter a SAMPLE_FORMAT_IMA_ADPCM sample is not supported. It will throw an error to the console, but will not alter the sample data.</description></method><method name="set_event_voice_global_volume_scale"><argument index="0" name="scale" type="float"></argument><description>
			Set global scale for event-based stream ([EventStream]) playback. Default is 1.0.</description></method><method name="set_fx_global_volume_scale"><argument index="0" name="scale" type="float"></argument><description>
			Set global scale for all voices (not including streams). Default is 1.0.</description></method><method name="set_stream_global_volume_scale"><argument index="0" name="scale" type="float"></argument><description>
			Set global scale for stream playback. Default is 1.0.</description></method><method name="voice_create"><return type="RID"></return><description>
			Allocate a voice for playback. Voices are persistent. A voice can play a single sample at the same time. See [method sample_create].</description></method><method name="voice_get_chorus" qualifiers="const"><return type="float"></return><argument index="0" name="voice" type="RID"></argument><description>
			Return the current chorus send for a given voice (0 to 1).</description></method><method name="voice_get_filter_cutoff" qualifiers="const"><return type="float"></return><argument index="0" name="voice" type="RID"></argument><description>
			Return the current filter cutoff (in hz) for a given voice.</description></method><method name="voice_get_filter_resonance" qualifiers="const"><return type="float"></return><argument index="0" name="voice" type="RID"></argument><description>
			Return the current filter resonance for a given voice.</description></method><method name="voice_get_filter_type" qualifiers="const"><return type="int"></return><argument index="0" name="voice" type="RID"></argument><description>
			Return the current selected filter type for a given voice, from the FILTER_* enum.</description></method><method name="voice_get_mix_rate" qualifiers="const"><return type="int"></return><argument index="0" name="voice" type="RID"></argument><description>
			Return the current mix rate for a given voice.</description></method><method name="voice_get_pan" qualifiers="const"><return type="float"></return><argument index="0" name="voice" type="RID"></argument><description>
			Return the current pan for a given voice (-1 to +1 range).</description></method><method name="voice_get_pan_depth" qualifiers="const"><return type="float"></return><argument index="0" name="voice" type="RID"></argument><description>
			Return the current pan depth for a given voice (-1 to +1 range).</description></method><method name="voice_get_pan_height" qualifiers="const"><return type="float"></return><argument index="0" name="voice" type="RID"></argument><description>
			Return the current pan height for a given voice (-1 to +1 range).</description></method><method name="voice_get_reverb" qualifiers="const"><return type="float"></return><argument index="0" name="voice" type="RID"></argument><description>
			Return the current reverb send for a given voice (0 to 1).</description></method><method name="voice_get_reverb_type" qualifiers="const"><return type="int"></return><argument index="0" name="voice" type="RID"></argument><description>
			Return the current reverb type for a given voice from the REVERB_* enum.</description></method><method name="voice_get_volume" qualifiers="const"><return type="float"></return><argument index="0" name="voice" type="RID"></argument><description>
			Return the current volume for a given voice.</description></method><method name="voice_is_positional" qualifiers="const"><return type="bool"></return><argument index="0" name="voice" type="RID"></argument><description>
			Return whether the current voice is positional. See [method voice_set_positional].</description></method><method name="voice_play"><argument index="0" name="voice" type="RID"></argument><argument index="1" name="sample" type="RID"></argument><description>
			Start playback of a given voice using a given sample. If the voice was already playing it will be restarted.</description></method><method name="voice_set_chorus"><argument index="0" name="voice" type="RID"></argument><argument index="1" name="chorus" type="float"></argument><description>
			Set chorus send post processing for the voice (from 0 to 1).</description></method><method name="voice_set_filter"><argument index="0" name="voice" type="RID"></argument><argument index="1" name="type" type="int"></argument><argument index="2" name="cutoff" type="float"></argument><argument index="3" name="resonance" type="float"></argument><argument index="4" name="gain" type="float" default="0"></argument><description>
			Set a resonant filter post processing for the voice. Filter type is a value from the FILTER_* enum.</description></method><method name="voice_set_mix_rate"><argument index="0" name="voice" type="RID"></argument><argument index="1" name="rate" type="int"></argument><description>
			Set a different playback mix rate for the given voice.</description></method><method name="voice_set_pan"><argument index="0" name="voice" type="RID"></argument><argument index="1" name="pan" type="float"></argument><argument index="2" name="depth" type="float" default="0"></argument><argument index="3" name="height" type="float" default="0"></argument><description>
			Change the pan of a currently playing voice and, optionally, the depth and height for a positional/3D sound. Panning values are expressed within the -1 to +1 range.</description></method><method name="voice_set_positional"><argument index="0" name="voice" type="RID"></argument><argument index="1" name="enabled" type="bool"></argument><description>
			Set whether a given voice is positional. This is only interpreted as a hint and used for backends that may support binaural encoding.</description></method><method name="voice_set_reverb"><argument index="0" name="voice" type="RID"></argument><argument index="1" name="room" type="int"></argument><argument index="2" name="reverb" type="float"></argument><description>
			Set the reverb send post processing for the voice (from 0 to 1) and the reverb type, from the REVERB_* enum.</description></method><method name="voice_set_volume"><argument index="0" name="voice" type="RID"></argument><argument index="1" name="volume" type="float"></argument><description>
			Change the volume of a currently playing voice. Volume is expressed as linear gain where 0.0 is mute and 1.0 is default.</description></method><method name="voice_stop"><argument index="0" name="voice" type="RID"></argument><description>
			Stop a given voice.</description></method></methods><constants><constant name="SAMPLE_FORMAT_PCM8" value="0">
			Sample format is 8 bits, signed.</constant><constant name="SAMPLE_FORMAT_PCM16" value="1">
			Sample format is 16 bits, little-endian, signed.</constant><constant name="SAMPLE_FORMAT_IMA_ADPCM" value="2">
			Sample format is IMA-ADPCM compressed.</constant><constant name="SAMPLE_LOOP_NONE" value="0">
			Sample does not loop.</constant><constant name="SAMPLE_LOOP_FORWARD" value="1">
			Sample loops in forward mode.</constant><constant name="SAMPLE_LOOP_PING_PONG" value="2">
			Sample loops in a bidirectional way.</constant><constant name="FILTER_NONE" value="0">
			Filter is disabled.</constant><constant name="FILTER_LOWPASS" value="1">
			Filter is a resonant lowpass.</constant><constant name="FILTER_BANDPASS" value="2">
			Filter is a resonant bandpass.</constant><constant name="FILTER_HIPASS" value="3">
			Filter is a resonant highpass.</constant><constant name="FILTER_NOTCH" value="4">
			Filter is a notch (band reject).</constant><constant name="FILTER_BANDLIMIT" value="6">
			Filter is a bandlimit (resonance used as highpass).</constant><constant name="REVERB_SMALL" value="0">
			Small reverb room (closet, bathroom, etc).</constant><constant name="REVERB_MEDIUM" value="1">
			Medium reverb room (living room)</constant><constant name="REVERB_LARGE" value="2">
			Large reverb room (warehouse).</constant><constant name="REVERB_HALL" value="3">
			Large reverb room with long decay.</constant></constants></class>