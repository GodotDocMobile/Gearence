<class category="Core" inherits="Object" name="Input"><brief_description>
	A Singleton that deals with inputs.</brief_description><description>
	A Singleton that deals with inputs. This includes key presses, mouse buttons and movement, joysticks, and input actions.</description><methods><method name="action_press"><argument index="0" name="action" type="String"></argument><description>
			This will simulate pressing the specificed action.</description></method><method name="action_release"><argument index="0" name="action" type="String"></argument><description>
			If the specified action is already pressed, this will release it.</description></method><method name="add_joy_mapping"><argument index="0" name="mapping" type="String"></argument><argument default="false" index="1" name="update_existing" type="bool"></argument><description>
			Add a new mapping entry (in SDL2 format) to the mapping database. Optionally update already connected devices.</description></method><method name="get_accelerometer"><return type="Vector3"></return><description>
			If the device has an accelerometer, this will return the movement.</description></method><method name="get_joy_axis"><return type="float"></return><argument index="0" name="device" type="int"></argument><argument index="1" name="axis" type="int"></argument><description>
			Returns the current value of the joystick axis at given index (see JOY_* constants in [@Global Scope])</description></method><method name="get_joy_guid" qualifiers="const"><return type="String"></return><argument index="0" name="device" type="int"></argument><description>
			Returns a SDL2 compatible device guid on platforms that use gamepad remapping. Returns "Default Gamepad" otherwise.</description></method><method name="get_joy_name"><return type="String"></return><argument index="0" name="device" type="int"></argument><description>
			Returns the name of the joystick at the specified device index</description></method><method name="get_mouse_button_mask" qualifiers="const"><return type="int"></return><description>
			Returns mouse buttons as a bitmask. If multiple mouse buttons are pressed at the same time the bits are added together.</description></method><method name="get_mouse_mode" qualifiers="const"><return type="int"></return><description>
			Return the mouse mode. See the constants for more information.</description></method><method name="get_mouse_speed" qualifiers="const"><return type="Vector2"></return><description>
			Returns the mouse speed.</description></method><method name="is_action_pressed"><return type="bool"></return><argument index="0" name="action" type="String"></argument><description>
			Returns true or false depending on whether the action event is pressed. Actions and their events can be set in the Project Settings / Input Map tab. Or be set with [InputMap].</description></method><method name="is_joy_button_pressed"><return type="bool"></return><argument index="0" name="device" type="int"></argument><argument index="1" name="button" type="int"></argument><description>
			Returns if the joystick button at the given index is currently pressed. (see JOY_* constants in [@Global Scope])</description></method><method name="is_joy_known"><return type="bool"></return><argument index="0" name="device" type="int"></argument><description>
			Returns if the specified device is known by the system. This means that it sets all button and axis indices exactly as defined in the JOY_* constants (see [@Global Scope]). Unknown joysticks are not expected to match these constants, but you can still retrieve events from them.</description></method><method name="is_key_pressed"><return type="bool"></return><argument index="0" name="scancode" type="int"></argument><description>
			Returns true or false depending on whether the key is pressed or not. You can pass KEY_*, which are pre-defined constants listed in [@Global Scope].</description></method><method name="is_mouse_button_pressed"><return type="bool"></return><argument index="0" name="button" type="int"></argument><description>
			Returns true or false depending on whether mouse button is pressed or not. You can pass BUTTON_*, which are pre-defined constants listed in [@Global Scope].</description></method><method name="remove_joy_mapping"><argument index="0" name="guid" type="String"></argument><description>
			Removes all mappings from the internal db that match the given uid.</description></method><method name="set_custom_mouse_cursor"><argument index="0" name="image" type="Texture"></argument><argument default="Vector2(0,0)" index="1" name="hotspot" type="Vector2"></argument><description>
			Set a custom mouse cursor image, which is only visible inside the game window. The hotspot can also be specified.</description></method><method name="set_mouse_mode"><argument index="0" name="mode" type="int"></argument><description>
			Set the mouse mode. See the constants for more information.</description></method><method name="warp_mouse_pos"><argument index="0" name="to" type="Vector2"></argument><description>
			Sets the mouse position to the specified vector.</description></method></methods><signals><signal name="joy_connection_changed"><argument index="0" name="index" type="int"></argument><argument index="1" name="connected" type="bool"></argument><description>
			Emitted when a joystick device has been connected or disconnected</description></signal></signals><constants><constant name="MOUSE_MODE_VISIBLE" value="0">
			Makes the mouse cursor visible if it is hidden.</constant><constant name="MOUSE_MODE_HIDDEN" value="1">
			Makes the mouse cursor hidden if it is visible.</constant><constant name="MOUSE_MODE_CAPTURED" value="2">
			Captures the mouse. The mouse will be hidden and unable to leave the game window. But it will still register movement and mouse button presses.</constant></constants></class>