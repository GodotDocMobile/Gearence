<class name="EventPlayer" inherits="Node" category="Core"><brief_description>
	Class for event stream playback.</brief_description><description>
	Class for event stream playback. Event streams are music expressed as a series of events (note on, note off, instrument change...), as opposed to audio streams, which are just audio data. Examples of event-based streams are MIDI files, or MOD music.
	Currently, only MOD, S3M, IT, and XM music is supported.</description><methods><method name="get_channel_last_note_time" qualifiers="const"><return type="float"></return><argument index="0" name="channel" type="int"></argument><description>
			Return the time at which the last note of a given channel in the stream plays.</description></method><method name="get_channel_volume" qualifiers="const"><return type="float"></return><argument index="0" name="channel" type="int"></argument><description>
			Return the volume scale for an individual channel of the stream.</description></method><method name="get_length" qualifiers="const"><return type="float"></return><description>
			Return the song length. May be in seconds, but depends on the stream type.</description></method><method name="get_loop_count" qualifiers="const"><return type="int"></return><description>
			Return the number of times the playback has looped.</description></method><method name="get_pitch_scale" qualifiers="const"><return type="float"></return><description>
			Return the pitch scale factor for this player.</description></method><method name="get_pos" qualifiers="const"><return type="float"></return><description>
			Return the playback position. May be in seconds, but depends on the stream type.</description></method><method name="get_stream" qualifiers="const"><return type="EventStream"></return><description>
			Return the currently assigned stream.</description></method><method name="get_stream_name" qualifiers="const"><return type="String"></return><description>
			Return the name of the currently assigned stream. This is not the file name, but a field inside the file. If no stream is assigned, if returns "&lt;No Stream&gt;".</description></method><method name="get_tempo_scale" qualifiers="const"><return type="float"></return><description>
			Return the tempo multiplier.</description></method><method name="get_volume" qualifiers="const"><return type="float"></return><description>
			Return the playback volume for this player.</description></method><method name="get_volume_db" qualifiers="const"><return type="float"></return><description>
			Return the playback volume for this player, in decibels.</description></method><method name="has_autoplay" qualifiers="const"><return type="bool"></return><description>
			Return whether this player will start playing as soon as it enters the scene tree.</description></method><method name="has_loop" qualifiers="const"><return type="bool"></return><description>
			Return whether this player will be restart the playback at the end.</description></method><method name="is_paused" qualifiers="const"><return type="bool"></return><description>
			Return whether the playback is currently paused.</description></method><method name="is_playing" qualifiers="const"><return type="bool"></return><description>
			Return whether this player is playing.</description></method><method name="play"><description>
			Play the currently assigned stream.</description></method><method name="seek_pos"><argument index="0" name="time" type="float"></argument><description>
			Set the playback position. May be in seconds, but depends on the stream type.</description></method><method name="set_autoplay"><argument index="0" name="enabled" type="bool"></argument><description>
			Set whether this player will start playing as soon as it enters the scene tree.</description></method><method name="set_channel_volume"><argument index="0" name="channel" type="int"></argument><argument index="1" name="channel_volume" type="float"></argument><description>
			Set the volume scale for an individual channel of the stream, with the same value range as [method set_volume]. The channel number depends on the stream format. For example, MIDIs range from 0 to 15, and MODs from 0 to 63.
			Many stream formats are multichannel, so this allows to affect only a part of the music.</description></method><method name="set_loop"><argument index="0" name="enabled" type="bool"></argument><description>
			Set whether the stream will be restarted at the end.</description></method><method name="set_paused"><argument index="0" name="paused" type="bool"></argument><description>
			Pause stream playback.</description></method><method name="set_pitch_scale"><argument index="0" name="pitch_scale" type="float"></argument><description>
			Set the pitch multiplier for all sounds coming from this stream. A value of 2.0 shifts all pitches one octave up, and a value of 0.5 shifts pitches one octave down.</description></method><method name="set_stream"><argument index="0" name="stream" type="EventStream"></argument><description>
			Set the [EventStream] this player will play.</description></method><method name="set_tempo_scale"><argument index="0" name="tempo_scale" type="float"></argument><description>
			Set the tempo multiplier. This allows to slow down or speed up the music, without affecting its pitch.</description></method><method name="set_volume"><argument index="0" name="volume" type="float"></argument><description>
			Set the playback volume for this player. This is a float between 0.0 (silent) and 1.0 (full volume). Values over 1.0 may amplify sound even more, but may introduce distortion. Negative values may just invert the output waveform, which produces no audible difference.
			The effect of these special values ultimately depends on the low-level implementation of the file format being played.</description></method><method name="set_volume_db"><argument index="0" name="db" type="float"></argument><description>
			Set the playback volume for this player, in decibels. This is a float between -80.0 (silent) and 0.0 (full volume). Values under -79.0 get truncated to -80, but values over 0.0 do not, so the warnings for over amplifying (see [method set_volume]) still apply.</description></method><method name="stop"><description>
			Stop playing.</description></method></methods><constants></constants></class>